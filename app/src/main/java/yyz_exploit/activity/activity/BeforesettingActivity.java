package yyz_exploit.activity.activity;
import android.annotation.SuppressLint;
import android.app.DatePickerDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.*;
import android.provider.MediaStore;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.*;

import com.alibaba.fastjson.JSON;
import com.bigkoo.pickerview.builder.TimePickerBuilder;
import com.bigkoo.pickerview.listener.OnTimeSelectListener;
import com.bigkoo.pickerview.view.TimePickerView;
import com.blankj.utilcode.util.CollectionUtils;
import com.bumptech.glide.Glide;
import com.google.gson.Gson;

import java.io.File;
import java.io.FileNotFoundException;
import java.net.URLEncoder;
import java.util.*;

//import com.jykj.live.lvb.liveroom.ui.LiveRoomActivity;
import entity.basicDate.ProvideBasicsDomain;
import entity.liveroom.*;
import netService.HttpNetService;
import netService.entity.NetRetEntity;
import www.jykj.com.jykj_zxyl.R;
import www.jykj.com.jykj_zxyl.activity.hyhd.LivePublisherActivity;
import www.jykj.com.jykj_zxyl.app_base.base_activity.BaseActivity;
import www.jykj.com.jykj_zxyl.application.Constant;
import www.jykj.com.jykj_zxyl.application.JYKJApplication;
import www.jykj.com.jykj_zxyl.util.BitmapUtil;
import www.jykj.com.jykj_zxyl.util.DateUtils;
import www.jykj.com.jykj_zxyl.util.StrUtils;
import yyz_exploit.Utils.FlowLayout;
import yyz_exploit.activity.util.LiveConvertUtil;
import yyz_exploit.dialog.AuthorityDialog;
import yyz_exploit.dialog.ClassDialog;
import yyz_exploit.dialog.Lin_Dialog;
import yyz_exploit.dialog.Lin_Live_Dialog;

public class BeforesettingActivity extends BaseActivity implements View.OnClickListener {

    private TextView keyword, beforese_time;
    private ImageView before_back, back_beforese, fill_in;
    private LinearLayout lin, beforese_class, lin_live, lin_Authority;
    private Button beforese_confirm;
    private ImageView beforese_add, authority, lin_live_back, lin_authority_back;
    private Context mContext;
    private File mTempFile;              //声明一个拍照结果的临时文件
    private BeforesettingActivity mActivity;
    private ImageView lin_add, beforese_Features, class_back;
    private Bitmap mLin_add;
    private FlowLayout beforese_fl, Danger_fl;

    private Boolean wat = false;

    private String mNetLoginRetStr;
    private Handler mHandler;
    private NetRetEntity netRetEntity;

    private List<ProvideBasicsDomain> provideBasicsDomains = new ArrayList<>();

    //直播类目
    private List<ProvideBasicsDomain> list;
    //危险因素
    private List<ProvideBasicsDomain> danger;
    private List<ProvideBasicsDomain> Doctors;
    private List<ProvideBasicsDomain> Patient;
    private Lin_Dialog lin_dialog;
    private Lin_Live_Dialog lin_live_dialog;
    private AuthorityDialog authorityDialog;
    private ClassDialog classDialog;
    private FlowLayout bf_fl;
    private FlowLayout authority_fl;
    private TextView beforese_time1;
    private Boolean isDoctorSelected = true;
    private SharedPreferences doctorAndPatientData;
    private SharedPreferences.Editor edit;
    private TextView startLive;
    private TextView tvDoctorBtn;
    private TextView tvPatientBtn;

    StringBuffer keycodesbuf = new StringBuffer();
    private final static int CHOOSE_KEY_RESULT = 4;
    String coverUrl;
    SubDataTask subDataTask;
    SubImgTask subImgTask;
    JYKJApplication mApp;
    StringBuffer keytextbuf = new StringBuffer();
    Map<String, ProvideBasicsDomain> classCodeMap = new HashMap();
    Map<String, ProvideBasicsDomain> riskCodeMap = new HashMap();
    Map<String, ProvideBasicsDomain> doctorWatchObjectAuthCodeMap = new HashMap();
    Map<String, ProvideBasicsDomain> patientWatchObjectAuthCodeMap = new HashMap();
    Map<String, ProvideBasicsDomain> attrCodeMap = new HashMap();
    public ProgressDialog mDialogProgress = null;
    String mdetailcode = "9a10c583a51e4396a8e83bd97f4b5014";
    String selkeywords = "";
    String live_type = LivePublisherActivity.LIVE_TYPE_PRELIVE;
    private static final String  liveTypeStrCode="6000200";//直播类目
    private static final String  hazardsTypeCode="6000300";//危险因素
    private static final String  permissionDocterCode="6000401";//观看权限(医生)
    private static final String  permissionPatientCode="6000501";////观看权限(患者)




    @Override
    protected int setLayoutId() {
        return R.layout.activity_beforesetting;
    }

    protected void initView() {
        live_type = StrUtils.defaulObjToStr(getIntent().getStringExtra("live_type"));
        mApp = (JYKJApplication) getApplication();
        mContext = this;
        mActivity = this;
        initDir();
        //返回
        before_back = findViewById(R.id.before_back);
        before_back.setOnClickListener(this);
        //直播主题
        fill_in = findViewById(R.id.fill_in);
        fill_in.setOnClickListener(this);
        //类目
        beforese_Features = findViewById(R.id.beforese_Features);
        beforese_Features.setOnClickListener(this);

        //权限
        authority = findViewById(R.id.authority);
        authority.setOnClickListener(this);

        //开始直播
        startLive = findViewById(R.id.startLive);
        startLive.setOnClickListener(this);
        initHandler();
        lin_Dialog();
        doctorAndPatientData = getSharedPreferences("DoctorAndPatientData", MODE_PRIVATE);
        edit = doctorAndPatientData.edit();
        edit.putString("DoctorDta", "-1");
        edit.putString("PatientData", "-1").commit();
    }

    private void initDir() {
        // 声明目录
        File tempDir = new File(Environment.getExternalStorageDirectory().getAbsolutePath()
                + "/_tempphoto");
        if (!tempDir.exists()) {
            tempDir.mkdirs();// 创建目录
        }
        mTempFile = new File(tempDir, BitmapUtil.getPhotoFileName());// 生成临时文件
    }

    //危险因素
    private void setOneFlowLayout() {
        if(!CollectionUtils.isEmpty(danger)){
            //如果有数据就直接显示
            for (int i = 0; i < danger.size(); i++) {
                addTextViews(danger.get(i),i);
            }
        }else{
            //如果无数据需要做网络请求添加数据danger
            HashMap<String, String> map = new HashMap<>();
            map.put("baseCode", "60003");
            datas(map);
        }

    }

    //直播类目
    private void setTwoFlowLayout() {
        if (!CollectionUtils.isEmpty(list)) {
            //如果有数据就直接显示
            for (int i = 0; i < list.size(); i++) {
                addTextView(list.get(i),i);
            }
        }else{
            //如果无数据需要做网络请求添加数据list
            HashMap<String, String> map = new HashMap<>();
            map.put("baseCode", "60002");
            data(map);
        }

    }

    //医生权限
    private void setAuthority_flFlowLayout() {
        if(!CollectionUtils.isEmpty(Doctors)){
            authority_fl.removeAllViews();
            for (int i = 0; i < Doctors.size(); i++) {
                addDoctors(Doctors.get(i));
            }
        }else{
            //添加数据list
            HashMap<String, String> map = new HashMap<>();
            map.put("baseCode", "60004");
            Doctors(map);
        }


    }

    //患者权限
    private void setPatientFlowLayout() {
        if (!CollectionUtils.isEmpty(Patient)) {
            authority_fl.removeAllViews();
            for (int i = 0; i < Patient.size(); i++) {
                addPatient(Patient.get(i));
            }
        } else {
            //添加数据list
            HashMap<String, String> map = new HashMap<>();
            map.put("baseCode", "60005");
            Patient(map);
        }
//        //添加数据list
//        HashMap<String, String> map = new HashMap<>();
//        map.put("baseCode", "60005");
//        Patient(map);
    }

    void toastChosetypeLimit() {
        Toast.makeText(mContext, "最多选择三个", Toast.LENGTH_LONG).show();
    }

    /**
     * 87      * 为每个view 添加点击事件
     * 88
     */
    @SuppressLint("ResourceAsColor")
    private void initEvents(final TextView tv, final int objtype) {

        tv.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                ProvideBasicsDomain parabean = (ProvideBasicsDomain) tv.getTag();
                if ("0".equals(parabean.getSelectState())) {
                    //edit.putString("DoctorDta",tv.getText().toString()).commit();
                    if (3 == objtype) {
                        if (permissionDocterCode.equals(parabean.getAttrCode().toString())) {
                            if (!doctorWatchObjectAuthCodeMap.keySet().isEmpty()) {
                                doctorWatchObjectAuthCodeMap.clear();
                                for (int i = 0; i < authority_fl.getChildCount(); i++) {
                                        View parv = authority_fl.getChildAt(i);
                                        if (null != parv.getTag() && parv.getTag() instanceof ProvideBasicsDomain) {
                                            ProvideBasicsDomain tmpbean = (ProvideBasicsDomain) parv.getTag();
                                            String parcode = StrUtils.defaulObjToStr(tmpbean.getAttrCode());
                                            if ("1".equals(tmpbean.getSelectState()) && !permissionDocterCode.equals(parcode)) {
                                                tmpbean.setSelectState("0");
                                                parv.setBackgroundResource(R.drawable.bg_round_e0e0e0_2);
                                                //((TextView) parv).setTextColor(R.color.tabColor_nomal);
                                                parv.setTag(tmpbean);
                                            }
                                        }
                                    }
//
                            }
                        } else {
                            for (int i = 0; i < authority_fl.getChildCount(); i++) {
                                View parv = authority_fl.getChildAt(i);
                                if (null != parv.getTag() && parv.getTag() instanceof ProvideBasicsDomain) {
                                    ProvideBasicsDomain tmpbean = (ProvideBasicsDomain) parv.getTag();
                                    String parcode = StrUtils.defaulObjToStr(tmpbean.getAttrCode());
                                    if ("1".equals(tmpbean.getSelectState()) && permissionDocterCode.equals(parcode)) {
                                        tmpbean.setSelectState("0");
                                        parv.setBackgroundResource(R.drawable.bg_round_e0e0e0_2);
                                        //((TextView) parv).setTextColor(R.color.tabColor_nomal);
                                        parv.setTag(tmpbean);
                                        doctorWatchObjectAuthCodeMap.remove(permissionDocterCode);
                                        break;
                                    }
                                }
                            }
                        }
                    } else if (4 == objtype) {
                        if (permissionPatientCode.equals(parabean.getAttrCode().toString())) {
                            if (!patientWatchObjectAuthCodeMap.keySet().isEmpty()) {
                                patientWatchObjectAuthCodeMap.clear();
                                for (int i = 0; i < authority_fl.getChildCount(); i++) {
                                    View parv = authority_fl.getChildAt(i);
                                    if (null != parv.getTag() && parv.getTag() instanceof ProvideBasicsDomain) {
                                        ProvideBasicsDomain tmpbean = (ProvideBasicsDomain) parv.getTag();
                                        if ("1".equals(tmpbean.getSelectState()) && !permissionPatientCode.equals(StrUtils.defaulObjToStr(tmpbean.getAttrCode()))) {
                                            tmpbean.setSelectState("0");
                                            parv.setBackgroundResource(R.drawable.bg_round_e0e0e0_2);
                                            //((TextView) parv).setTextColor(R.color.tabColor_nomal);
                                            parv.setTag(tmpbean);
                                        }
                                    }
                                }
                            }
                        } else {
                            for (int i = 0; i < authority_fl.getChildCount(); i++) {
                                View parv = authority_fl.getChildAt(i);
                                if (null != parv.getTag() && parv.getTag() instanceof ProvideBasicsDomain) {
                                    ProvideBasicsDomain tmpbean = (ProvideBasicsDomain) parv.getTag();
                                    if ("1".equals(tmpbean.getSelectState()) && permissionPatientCode.equals(StrUtils.defaulObjToStr(tmpbean.getAttrCode()))) {
                                        tmpbean.setSelectState("0");
                                        parv.setBackgroundResource(R.drawable.bg_round_e0e0e0_2);
                                        //((TextView) parv).setTextColor(R.color.tabColor_nomal);
                                        parv.setTag(tmpbean);
                                        patientWatchObjectAuthCodeMap.remove(permissionPatientCode);
                                        break;
                                    }
                                }
                            }
                        }
                    }

                    if (1 == objtype) {
                        if (classCodeMap.isEmpty() || classCodeMap.keySet().size() < 3) {
                            tv.setBackgroundResource(R.drawable.bg_round_a8c0ff_2);
                            parabean.setSelectState("1");
                            tv.setTag(parabean);
                            classCodeMap.put(StrUtils.defaulObjToStr(parabean.getAttrCode()), parabean);
                        } else {
                            parabean.setSelectState("0");
                            toastChosetypeLimit();
                        }
                    } else if (2 == objtype) {
                        if (riskCodeMap.isEmpty() || riskCodeMap.keySet().size() < 3) {
                            tv.setBackgroundResource(R.drawable.bg_round_a8c0ff_2);
                            parabean.setSelectState("1");
                            riskCodeMap.put(StrUtils.defaulObjToStr(parabean.getAttrCode()), parabean);
                        } else {
                            parabean.setSelectState("0");
                            toastChosetypeLimit();
                        }
                    } else if (3 == objtype) {
                        if (doctorWatchObjectAuthCodeMap.isEmpty() || doctorWatchObjectAuthCodeMap.keySet().size() < 3) {
                            tv.setBackgroundResource(R.drawable.bg_round_a8c0ff_2);
                            parabean.setSelectState("1");
                            doctorWatchObjectAuthCodeMap.put(StrUtils.defaulObjToStr(parabean.getAttrCode()), parabean);
                        } else {
                            parabean.setSelectState("0");
                            toastChosetypeLimit();
                        }
                    } else if (4 == objtype) {
                        if (patientWatchObjectAuthCodeMap.isEmpty() || patientWatchObjectAuthCodeMap.keySet().size() < 3) {
                            tv.setBackgroundResource(R.drawable.bg_round_a8c0ff_2);
                            parabean.setSelectState("1");
                            patientWatchObjectAuthCodeMap.put(StrUtils.defaulObjToStr(parabean.getAttrCode()), parabean);
                        } else {
                            parabean.setSelectState("0");
                            toastChosetypeLimit();
                        }
                    }
                } else {

                    if (1 == objtype) {
                        if (classCodeMap.size()==1) {
                            Toast.makeText(mContext, "最少选中一个", Toast.LENGTH_LONG).show();
                            return;
                        }
                        classCodeMap.remove(StrUtils.defaulObjToStr(parabean.getAttrCode()));

                    } else if (2 == objtype) {
                        if (riskCodeMap.size()==2) {
                            Toast.makeText(mContext, "最少选中一个", Toast.LENGTH_LONG).show();
                            return;
                        }
                        riskCodeMap.remove(StrUtils.defaulObjToStr(parabean.getAttrCode()));
                    } else if (3 == objtype) {
                        if (doctorWatchObjectAuthCodeMap.size()==1) {
                            Toast.makeText(mContext, "最少选中一个", Toast.LENGTH_LONG).show();
                            return;
                        }
                        doctorWatchObjectAuthCodeMap.remove(StrUtils.defaulObjToStr(parabean.getAttrCode()));
                    } else if (4 == objtype) {
                        if (patientWatchObjectAuthCodeMap.size()==1) {
                            Toast.makeText(mContext, "最少选中一个", Toast.LENGTH_LONG).show();
                            return;
                        }
                        patientWatchObjectAuthCodeMap.remove(StrUtils.defaulObjToStr(parabean.getAttrCode()));
                    }
                    tv.setBackgroundResource(R.drawable.bg_round_e0e0e0_2);
                    parabean.setSelectState("0");
                    tv.setTag(parabean);
                }

            }
        });
    }


    /**
     * 获取进度条
     */

    public void getProgressBar(String title, String progressPrompt) {
        if (mDialogProgress == null) {
            mDialogProgress = new ProgressDialog(this);
        }
        mDialogProgress.setTitle(title);
        mDialogProgress.setMessage(progressPrompt);
        mDialogProgress.setCancelable(false);
        mDialogProgress.show();
    }

    /**
     * 取消进度条
     */
    public void cacerProgress() {
        if (mDialogProgress != null) {
            mDialogProgress.dismiss();
        }
    }

    void subdata() {
        getProgressBar("数据提交", "提交数据中...");
        if (null != mLin_add) {
            CoverInfo thecover = new CoverInfo();
            thecover.setImgBase64Data(URLEncoder.encode("data:image/jpg;base64," + BitmapUtil.bitmaptoString(mLin_add)));
            thecover.setLoginUserPosition(mApp.loginDoctorPosition);
            thecover.setOperUserCode(mApp.mViewSysUserDoctorInfoAndHospital.getDoctorCode());
            thecover.setOperUserName(mApp.mViewSysUserDoctorInfoAndHospital.getUserName());
            thecover.setRequestClientType("1");
            subImgTask = new SubImgTask(thecover);
            subImgTask.execute();
        } else {
            subInfo();
        }
    }

    void subInfo() {
        String thetit = StrUtils.defaulObjToStr(((EditText) lin_dialog.findViewById(R.id.ed_theme)).getText());
        String thelivetime = StrUtils.defaulObjToStr(((TextView) lin_dialog.findViewById(R.id.beforese_time)).getText());

        LiveRoomInfo subinfo = new LiveRoomInfo();
        subinfo.setLoginUserPosition(mApp.loginDoctorPosition);
        subinfo.setRequestClientType("1");
        subinfo.setOperUserCode(mApp.mViewSysUserDoctorInfoAndHospital.getDoctorCode());
        subinfo.setOperUserName(mApp.mViewSysUserDoctorInfoAndHospital.getUserName());
        subinfo.setAttrCode(keycodesbuf.toString());
        String tmpkey = keytextbuf.toString();
        if (tmpkey.length() > 0) {
            tmpkey = tmpkey.replaceAll(",", "^");
        }
        subinfo.setAttrName(tmpkey);
        if (StrUtils.defaulObjToStr(coverUrl).length() > 0) {
            subinfo.setBroadcastCoverImgUrl(coverUrl);
        }
        if (thelivetime.length() > 0) {
            subinfo.setBroadcastDate(thelivetime);
        }
        subinfo.setBroadcastTitle(thetit);
        subinfo.setBroadcastState(live_type);
        subinfo.setBroadcastType("1");
        String mapToStrCode = LiveConvertUtil.getMapToStrCode(classCodeMap);
        subinfo.setClassCode(mapToStrCode);
        String mapToStrName = LiveConvertUtil.getMapToStrName(classCodeMap);
        subinfo.setClassName(mapToStrName);
        String mapToStrRiskCode = LiveConvertUtil.getMapToStrCode(riskCodeMap);
        subinfo.setRiskCode(mapToStrRiskCode);
        String mapToStrRiskName = LiveConvertUtil.getMapToStrName(riskCodeMap);
        subinfo.setRiskName(mapToStrRiskName);
        String mapToStrDoctorCode = LiveConvertUtil.getMapToStrCode(doctorWatchObjectAuthCodeMap);
        subinfo.setDoctorWatchObjectAuthCode(mapToStrDoctorCode);
        String mapToStrDoctorName = LiveConvertUtil.getMapToStrName(doctorWatchObjectAuthCodeMap);
        subinfo.setDoctorWatchObjectAuthName(mapToStrDoctorName);
        String mapToStrPatientCode = LiveConvertUtil.getMapToStrCode(patientWatchObjectAuthCodeMap);
        subinfo.setPatientWatchObjectAuthCode(mapToStrPatientCode);
        String mapToStrPatientName = LiveConvertUtil.getMapToStrName(patientWatchObjectAuthCodeMap);
        subinfo.setPatientWatchObjectAuthName(mapToStrPatientName);
        subDataTask = new SubDataTask(subinfo);
        subDataTask.execute();
    }



    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.before_back:
                finish();
                break;
            //直播主题dialog
            case R.id.fill_in:
                lin_Dialog();
                break;
            //直播类目
            case R.id.beforese_Features:
                lin_Live_Dialog();
                break;
            //权限
            case R.id.authority:
                authorityDialog = new AuthorityDialog(this);
                authorityDialog.show();
                String doctorDta = doctorAndPatientData.getString("DoctorDta", "");
                Log.e("ASS1", doctorDta);


                authority_fl = authorityDialog.findViewById(R.id.authority_fl);
                tvDoctorBtn=authorityDialog.findViewById(R.id.Doctors);
                tvPatientBtn=authorityDialog.findViewById(R.id.patient);
                if(isDoctorSelected){
                    setAuthority_flFlowLayout();
                }else{
                    setPatientFlowLayout();
                }
                setAuthorityChooseStatus();
                //  setPatientFlowLayout();
                authorityDialog.findViewById(R.id.lin_authority_back).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        authorityDialog.dismiss();
                    }
                });
                //医生
                tvDoctorBtn.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        //todo 改变字体背景  取消另一个的背景颜色和字体颜色
                        isDoctorSelected = true;
                        setAuthority_flFlowLayout();
                        setAuthorityChooseStatus();
                    }
                });
                //患者
                tvPatientBtn.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        //todo 改变字体背景  取消另一个的背景颜色和字体颜色
                        isDoctorSelected = false;
                        setPatientFlowLayout();
                        setAuthorityChooseStatus();
                    }
                });
                //关闭
                authorityDialog.findViewById(R.id.lin_authority_back).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        authorityDialog.dismiss();
                    }
                });
                authorityDialog.setOnDismissListener(new DialogInterface.OnDismissListener() {
                    @Override
                    public void onDismiss(DialogInterface dialog) {
                        String doctorDta = doctorAndPatientData.getString("DoctorDta", "");
                        Log.e("ASS2", doctorDta + "");
                    }
                });
                break;
            case R.id.startLive:
                /*Intent goliveintent = new Intent(BeforesettingActivity.this, LiveRoomActivity.class);
                goliveintent.putExtra("TITLE", "我的直播");
                goliveintent.putExtra("TYPE",0);
                startActivity(goliveintent);*/
                subdata();
                break;
        }
    }

    /**
     * 设置权限角色选中状态
     */
    private void setAuthorityChooseStatus() {
        if (isDoctorSelected) {//医生是否被选中
            //todo Doctors  改变字体背景
            tvDoctorBtn.setBackgroundResource(R.drawable.bg_round_a8c0ff_2);
            tvPatientBtn.setBackgroundResource(R.drawable.bg_round_e0e0e0_2);
            //doctorDta  item默认选择index
        } else {
            //todo patient
            tvDoctorBtn.setBackgroundResource(R.drawable.bg_round_e0e0e0_2);
            tvPatientBtn.setBackgroundResource(R.drawable.bg_round_a8c0ff_2);
        }
    }


    //直播类目
    private void lin_Live_Dialog() {
        lin_live_dialog = new Lin_Live_Dialog(this);
        lin_live_dialog.show();
        lin_live_dialog.findViewById(R.id.lin_live_back).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                lin_live_dialog.dismiss();
            }
        });
        //直播类目数据展示
        bf_fl = lin_live_dialog.findViewById(R.id.beforese_fl);
        //危险因素
        Danger_fl = lin_live_dialog.findViewById(R.id.Danger_fl);
        //直播类目
        setTwoFlowLayout();
        // 危险因素
        setOneFlowLayout();

        //  lin_dialog.dismiss();
    }

    //直播类目
    @SuppressLint("ResourceAsColor")
    private void addTextView(ProvideBasicsDomain parabean, int index) {
        TextView child = new TextView(this);
        ViewGroup.MarginLayoutParams params = new ViewGroup.MarginLayoutParams(ViewGroup.MarginLayoutParams.WRAP_CONTENT, ViewGroup.MarginLayoutParams.WRAP_CONTENT);
        params.setMargins(14, 14, 14, 14);
        child.setLayoutParams(params);
        child.setPadding(8, 8, 8, 8);
        child.setBackgroundResource(R.drawable.bg_round_e0e0e0_2);
        child.setText(parabean.getAttrName());
        child.setTag(parabean);
        if (classCodeMap.isEmpty()) {
            if (index == 0) {
                classCodeMap.put(StrUtils.defaulObjToStr(parabean.getAttrCode()), parabean);
            }
        }
        if (classCodeMap.containsKey(StrUtils.defaulObjToStr(parabean.getAttrCode()))) {
            child.setBackgroundResource(R.drawable.bg_round_a8c0ff_2);
        }
        initEvents(child, 1);//监听  provideBasicsDomains

        //添加点击事件，也是实现显示selector的效果的一种方式
        bf_fl.addView(child);
    }

    //危险因素
    @SuppressLint("ResourceAsColor")
    private void addTextViews(ProvideBasicsDomain parabean,int index) {
        TextView child = new TextView(this);
        ViewGroup.MarginLayoutParams params = new ViewGroup.MarginLayoutParams(ViewGroup.MarginLayoutParams.WRAP_CONTENT, ViewGroup.MarginLayoutParams.WRAP_CONTENT);
        params.setMargins(14, 14, 14, 14);
        child.setLayoutParams(params);
        child.setPadding(8,8,8,8);
        child.setBackgroundResource(R.drawable.bg_round_e0e0e0_2);
        child.setText(parabean.getAttrName());
        child.setTag(parabean);
        if (riskCodeMap.isEmpty()) {
            if(index==0){
                parabean.setSelectState("1");
                riskCodeMap.put(StrUtils.defaulObjToStr(parabean.getAttrCode()),parabean);
            }
        }
        if (riskCodeMap.containsKey(StrUtils.defaulObjToStr(parabean.getAttrCode()))) {
            child.setBackgroundResource(R.drawable.bg_round_a8c0ff_2);
        }
        initEvents(child, 2);//监听
        Danger_fl.addView(child);

    }

    //医生权限
    @SuppressLint("ResourceAsColor")
    private void addDoctors(ProvideBasicsDomain parabean) {
        TextView child = new TextView(this);
        ViewGroup.MarginLayoutParams params = new ViewGroup.MarginLayoutParams(ViewGroup.MarginLayoutParams.WRAP_CONTENT, ViewGroup.MarginLayoutParams.WRAP_CONTENT);
        params.setMargins(14, 14, 14, 14);
        if (doctorWatchObjectAuthCodeMap.keySet().size()==0) {
            if (permissionDocterCode.equals(StrUtils.defaulObjToStr(parabean.getAttrCode()))) {
                parabean.setSelectState("1");
                doctorWatchObjectAuthCodeMap.put(StrUtils.defaulObjToStr(parabean.getAttrCode()), parabean);
            }
        }
        child.setLayoutParams(params);
        child.setPadding(8,8,8,8);
        child.setBackgroundResource(R.drawable.bg_round_e0e0e0_2);
        child.setText(parabean.getAttrName());
        child.setTag(parabean);
        if (doctorWatchObjectAuthCodeMap.containsKey(StrUtils.defaulObjToStr(parabean.getAttrCode()))) {
            child.setBackgroundResource(R.drawable.bg_round_a8c0ff_2);
        }
        initEvents(child, 3);//监听
        authority_fl.addView(child);

    }

    //医生权限
    @SuppressLint("ResourceAsColor")
    private void addPatient(ProvideBasicsDomain parabean) {
        TextView child = new TextView(this);
        ViewGroup.MarginLayoutParams params = new ViewGroup.MarginLayoutParams(ViewGroup.MarginLayoutParams.WRAP_CONTENT, ViewGroup.MarginLayoutParams.WRAP_CONTENT);
        params.setMargins(14, 14, 14, 14);
        if(patientWatchObjectAuthCodeMap.keySet().size() == 0){
            if (permissionPatientCode.equals(StrUtils.defaulObjToStr(parabean.getAttrCode()))) {
                parabean.setSelectState("1");
                patientWatchObjectAuthCodeMap.put(StrUtils.defaulObjToStr(parabean.getAttrCode()), parabean);
            }
        }
        child.setLayoutParams(params);
        child.setPadding(8,8,8,8);
        child.setBackgroundResource(R.drawable.bg_round_e0e0e0_2);
        child.setText(parabean.getAttrName());
        child.setTag(parabean);
        if (patientWatchObjectAuthCodeMap.containsKey(StrUtils.defaulObjToStr(parabean.getAttrCode()))) {
            child.setBackgroundResource(R.drawable.bg_round_a8c0ff_2);
        }
        initEvents(child, 4);//监听
        authority_fl.addView(child);
    }

    //直播主题dialog
    private void lin_Dialog() {
        if (null == lin_dialog) {
            lin_dialog = new Lin_Dialog(this);
        }
        lin_dialog.show();
        //关闭
        lin_dialog.findViewById(R.id.back_beforese).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                lin_dialog.dismiss();
            }
        });
        //相机相册选择
        lin_dialog.findViewById(R.id.beforese_add).setOnClickListener(v -> {
            String[] items = {"拍照", "从相册选择"};
            new android.support.v7.app.AlertDialog.Builder(mContext)
                    .setItems(items, new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialogInterface, int i) {
                            switch (i) {
                                case 0:
                                    StrictMode.VmPolicy.Builder builder = new StrictMode.VmPolicy.Builder();
                                    StrictMode.setVmPolicy(builder.build());
                                    builder.detectFileUriExposure();
                                    // 添加Action类型：MediaStore.ACTION_IMAGE_CAPTURE
                                    Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                                    // 指定调用相机拍照后照片(结果)的储存路径
                                    intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(mTempFile));
                                    // 等待返回结果
                                    startActivityForResult(intent, Constant.SELECT_PIC_BY_TACK_PHOTO);
                                    break;
                                case 1:
                                    BitmapUtil.selectAlbum(BeforesettingActivity.this);//从相册选择
                                    break;
                            }
                        }
                    }).show();
        });
        if (live_type.equals(LivePublisherActivity.LIVE_TYPE_HOTLIVE)) {
            lin_dialog.findViewById(R.id.beforese_time).setVisibility(View.GONE);
            lin_dialog.findViewById(R.id.beforese_time_tit).setVisibility(View.GONE);
        } else {
            lin_dialog.findViewById(R.id.beforese_time).setVisibility(View.VISIBLE);
            lin_dialog.findViewById(R.id.beforese_time_tit).setVisibility(View.VISIBLE);
        }
        //时间选择
        lin_dialog.findViewById(R.id.beforese_time).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                TimePickerView chosetime = new TimePickerBuilder(mContext, new OnTimeSelectListener() {
                    @Override
                    public void onTimeSelect(Date date, View v) {
                        ((TextView) lin_dialog.findViewById(R.id.beforese_time)).setText(DateUtils.formatDateStr(date, "yyyy-MM-dd HH:mm"));
                    }
                }).setType(new boolean[]{true, true, true, true, true, false})
                        .setLabel("年", "月", "日", "时", "分", "").build();
                chosetime.show();
                //showBirthDayChoiceDialog();
            }
        });
        //确认按钮
        lin_dialog.findViewById(R.id.beforese_confirm).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                lin_dialog.dismiss();
                classDialog = new ClassDialog(BeforesettingActivity.this);
                classDialog.show();
                TextView choose_live_class = classDialog.findViewById(R.id.choose_live_class);
                TextView choose_danger_factor = classDialog.findViewById(R.id.choose_danger_factor);
                TextView choose_doctor_auth = classDialog.findViewById(R.id.choose_doctor_auth);
                TextView choose_patient_auth = classDialog.findViewById(R.id.choose_patient_auth);
                if (classCodeMap.isEmpty()) {
                    ProvideBasicsDomain provideBasicsDomain=new ProvideBasicsDomain();
                    provideBasicsDomain.setAttrCode(Integer.parseInt(liveTypeStrCode));
                    provideBasicsDomain.setAttrName("默认");
                    classCodeMap.put(liveTypeStrCode,provideBasicsDomain);
                }
                if (riskCodeMap.isEmpty()) {
                    ProvideBasicsDomain provideBasicsDomain=new ProvideBasicsDomain();
                    provideBasicsDomain.setAttrCode(Integer.parseInt(hazardsTypeCode));
                    provideBasicsDomain.setAttrName("默认");
                    riskCodeMap.put(hazardsTypeCode,provideBasicsDomain);
                }
                if(doctorWatchObjectAuthCodeMap.isEmpty()){
                    ProvideBasicsDomain provideBasicsDomain=new ProvideBasicsDomain();
                    provideBasicsDomain.setAttrCode(Integer.parseInt(permissionDocterCode));
                    provideBasicsDomain.setAttrName("共开(所有)");
                    doctorWatchObjectAuthCodeMap.put(permissionDocterCode,provideBasicsDomain);
                }
                if (patientWatchObjectAuthCodeMap.isEmpty()) {
                    ProvideBasicsDomain provideBasicsDomain=new ProvideBasicsDomain();
                    provideBasicsDomain.setAttrCode(Integer.parseInt(permissionPatientCode));
                    provideBasicsDomain.setAttrName("共开(所有)");
                    patientWatchObjectAuthCodeMap.put(permissionPatientCode,provideBasicsDomain);
                }
                choose_live_class.setText(LiveConvertUtil.getMapToStr(classCodeMap));
                choose_danger_factor.setText(LiveConvertUtil.getMapToStr(riskCodeMap));
                choose_doctor_auth.setText(LiveConvertUtil.getMapToStr(doctorWatchObjectAuthCodeMap));
                choose_patient_auth.setText(LiveConvertUtil.getMapToStr(patientWatchObjectAuthCodeMap));
                classDialog.findViewById(R.id.class_back).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        classDialog.dismiss();
                    }
                });
            }
        });
        //直播关键字
        lin_dialog.findViewById(R.id.Keyword).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(BeforesettingActivity.this, KeywordActivity.class);
                intent.putExtra("selkeywords", selkeywords);
                startActivityForResult(intent, CHOOSE_KEY_RESULT);
            }
        });

    }


    /**
     * 选择日期
     */
    private void showBirthDayChoiceDialog() {
        Calendar nowdate = Calendar.getInstance();
        int mYear = nowdate.get(Calendar.YEAR);
        int mMonth = nowdate.get(Calendar.MONTH);
        int mDay = nowdate.get(Calendar.DAY_OF_MONTH);
        new DatePickerDialog(mContext, onDateSetListener, mYear, mMonth, mDay).show();
    }

    private DatePickerDialog.OnDateSetListener onDateSetListener = new DatePickerDialog.OnDateSetListener() {

        @Override
        public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {
            int mYear = year;
            int mMonth = monthOfYear + 1;
            int mDay = dayOfMonth;
            String month = "";
            String day = "";
//            TextView date_textview = (TextView) findViewById(R.id.changebirth_textview);
            String days;
            if (mMonth < 10)
                month = "0" + mMonth;
            else
                month = mMonth + "";
            if (mDay < 10)
                day = "0" + mDay;
            else
                day = mDay + "";
            beforese_time = lin_dialog.findViewById(R.id.beforese_time);
            beforese_time.setText(mYear + "-" + month + "-" + day);
            //   mProvideViewSysUserDoctorInfoAndHospital.setBirthdayStr(mYear + "-" + month + "-" + day);
            System.out.println();
        }
    };


    @Override
    protected void onActivityResult(
            int requestCode,  // 请求码 自定义
            int resultCode,  // 结果码 成功 -1 == OK
            Intent data) { // 数据 ? 可以没有
        try {

            // 如果是直接从相册获取
            if (requestCode == Constant.SELECT_PIC_FROM_ALBUM
                    && resultCode == RESULT_OK
                    && data != null) {

                final Uri uri = data.getData();//返回相册图片的Uri
                BitmapUtil.startPhotoZoom(mActivity, uri, 450);
            }

            // 处理拍照返回
            if (requestCode == Constant.SELECT_PIC_BY_TACK_PHOTO
                    && resultCode == RESULT_OK) {// 拍照成功 RESULT_OK= -1
                // 剪裁图片
                BitmapUtil.startPhotoZoom(mActivity, Uri.fromFile(mTempFile), 450);
            }
            // 接收剪裁回来的结果
            if (requestCode == Constant.REQUEST_PHOTO_CUT
                    && resultCode == RESULT_OK) {// 剪裁加工成功
                //让剪裁结果显示到图片框
                setPicToView(data);
            }
            if (requestCode == CHOOSE_KEY_RESULT) {
                selkeywords = StrUtils.defaulObjToStr(data.getStringExtra("choosekeys"));
                keytextbuf = new StringBuffer();
                if (selkeywords.length() > 1) {
                    List<Keyword> thelist = JSON.parseArray(selkeywords, Keyword.class);
                    keycodesbuf = new StringBuffer();
                    for (int i = 0; i < thelist.size(); i++) {
                        Keyword thekey = thelist.get(i);
                        if (keycodesbuf.toString().length() > 0) {
                            keycodesbuf.append("^");
                        }
                        keycodesbuf.append(thekey.getAttrCode());
                        if (keytextbuf.toString().length() > 0) {
                            keytextbuf.append(",");
                        }
                        keytextbuf.append(thekey.getAttrName());
                    }
                }
                ((TextView) lin_dialog.findViewById(R.id.Keyword)).setText(keytextbuf.toString());
            }
        } catch (Exception e) {
            Log.i("yi", "yichahahaha");
        }
        super.onActivityResult(requestCode, resultCode, data);
    }

    public void setPicToView(Intent data) {
        Bitmap photo;
        try {
            Uri u = data.getData();
            if (u != null) {
                photo = BitmapFactory.decodeStream(getContentResolver().openInputStream(data.getData()));//将imageUri对象的图片加载到内存
            } else {
                System.out.println("进来了");
                photo = BitmapFactory.decodeStream(getContentResolver().openInputStream(Uri.fromFile(new File(Environment.getExternalStorageDirectory(), "test.jpg"))));//将imageUri对象的图片加载到内存
            }
            System.out.println("图片：" + photo);
            mLin_add = photo;

            //显示图片
//            mUserHeadImage.setImageBitmap(photo);
            lin_add = lin_dialog.findViewById(R.id.lin_add);
            Glide.with(this).load(photo).into(lin_add);

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }

    private void data(HashMap<String, String> map) {

        new Thread() {
            public void run() {
                try {
                    mNetLoginRetStr = HttpNetService.urlConnectionService("jsonDataInfo=" + new Gson().toJson(map), Constant.SERVICEURL + "basicDataController/getBasicsDomain");
                    Log.e("tag", "直播类目 " + mNetLoginRetStr);
                } catch (Exception e) {
                    NetRetEntity retEntity = new NetRetEntity();
                    retEntity.setResCode(0);
                    retEntity.setResMsg("网络连接异常，请联系管理员：" + e.getMessage());
                    mNetLoginRetStr = new Gson().toJson(retEntity);
                    e.printStackTrace();
                }
                netRetEntity = JSON.parseObject(mNetLoginRetStr, NetRetEntity.class);

                mHandler.sendEmptyMessage(1);
            }
        }.start();
    }

    private void datas(HashMap<String, String> map) {

        new Thread() {
            public void run() {
                try {
                    mNetLoginRetStr = HttpNetService.urlConnectionService("jsonDataInfo=" + new Gson().toJson(map), Constant.SERVICEURL + "basicDataController/getBasicsDomain");
                    Log.e("tag", "run:2222 " + mNetLoginRetStr);
                } catch (Exception e) {
                    NetRetEntity retEntity = new NetRetEntity();
                    retEntity.setResCode(0);
                    retEntity.setResMsg("网络连接异常，请联系管理员：" + e.getMessage());
                    mNetLoginRetStr = new Gson().toJson(retEntity);
                    e.printStackTrace();

                }
                netRetEntity = JSON.parseObject(mNetLoginRetStr, NetRetEntity.class);

                mHandler.sendEmptyMessage(2);
            }
        }.start();
    }

    private void Doctors(HashMap<String, String> map) {

        new Thread() {
            public void run() {
                try {
                    mNetLoginRetStr = HttpNetService.urlConnectionService("jsonDataInfo=" + new Gson().toJson(map), Constant.SERVICEURL + "basicDataController/getBasicsDomain");
                    Log.e("tag", "run:3333 " + mNetLoginRetStr);
                } catch (Exception e) {
                    NetRetEntity retEntity = new NetRetEntity();
                    retEntity.setResCode(0);
                    retEntity.setResMsg("网络连接异常，请联系管理员：" + e.getMessage());
                    mNetLoginRetStr = new Gson().toJson(retEntity);
                    e.printStackTrace();

                }
                netRetEntity = JSON.parseObject(mNetLoginRetStr, NetRetEntity.class);

                mHandler.sendEmptyMessage(3);
            }
        }.start();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
    }

    private void Patient(HashMap<String, String> map) {

        new Thread() {
            public void run() {
                try {
                    mNetLoginRetStr = HttpNetService.urlConnectionService("jsonDataInfo=" + new Gson().toJson(map), Constant.SERVICEURL + "basicDataController/getBasicsDomain");
                    Log.e("tag", "run:3333 " + mNetLoginRetStr);
                } catch (Exception e) {
                    NetRetEntity retEntity = new NetRetEntity();
                    retEntity.setResCode(0);
                    retEntity.setResMsg("网络连接异常，请联系管理员：" + e.getMessage());
                    mNetLoginRetStr = new Gson().toJson(retEntity);
                    e.printStackTrace();

                }
                netRetEntity = JSON.parseObject(mNetLoginRetStr, NetRetEntity.class);

                mHandler.sendEmptyMessage(4);
            }
        }.start();
    }

    @SuppressLint("HandlerLeak")
    private void initHandler() {
        mHandler = new Handler() {
            @SuppressLint("HandlerLeak")
            @Override
            public void handleMessage(Message msg) {
                switch (msg.what) {
                    case 1:
                        if (mNetLoginRetStr != null && !mNetLoginRetStr.equals("")) {
                            provideBasicsDomains = JSON.parseArray(JSON.parseObject(mNetLoginRetStr, NetRetEntity.class).getResJsonData(), ProvideBasicsDomain.class);
                            list = new ArrayList<>();
                            list.addAll(provideBasicsDomains);
                            for (int i = 0; i < list.size(); i++) {
                                addTextView(list.get(i),i);
                            }
                        }

                        break;

                    case 2:
                        if (mNetLoginRetStr != null && !mNetLoginRetStr.equals("")) {
                            provideBasicsDomains = JSON.parseArray(JSON.parseObject(mNetLoginRetStr, NetRetEntity.class).getResJsonData(), ProvideBasicsDomain.class);
                            danger = new ArrayList<>();
                            danger.addAll(provideBasicsDomains);
                            for (int i = 0; i < danger.size(); i++) {
                                addTextViews(danger.get(i),i);
                            }
                        }
                        break;
                    case 3:
                        if (mNetLoginRetStr != null && !mNetLoginRetStr.equals("")) {
                            provideBasicsDomains = JSON.parseArray(JSON.parseObject(mNetLoginRetStr, NetRetEntity.class).getResJsonData(), ProvideBasicsDomain.class);
                            Doctors = new ArrayList<>();
                            authority_fl.removeAllViews();
                            Doctors.addAll(provideBasicsDomains);
                            for (int i = 0; i < Doctors.size(); i++) {
                                addDoctors(Doctors.get(i));
                            }
                        }
                        break;
                    case 4:
                        if (mNetLoginRetStr != null && !mNetLoginRetStr.equals("")) {
                            provideBasicsDomains = JSON.parseArray(JSON.parseObject(mNetLoginRetStr, NetRetEntity.class).getResJsonData(), ProvideBasicsDomain.class);
                            authority_fl.removeAllViews();
                            Patient = new ArrayList<>();
                            Patient.addAll(provideBasicsDomains);
                            for (int i = 0; i < Patient.size(); i++) {
                                addPatient(Patient.get(i));
                            }
                        }
                        break;
                }
            }
        };
    }

    class SubDataTask extends AsyncTask<Void, Void, Boolean> {
        LiveRoomInfo subInfo;
        String retjson = "";
        String retmsg = "";

        SubDataTask(LiveRoomInfo subInfo) {
            this.subInfo = subInfo;
        }

        @Override
        protected Boolean doInBackground(Void... voids) {
            try {
                String subjson = new Gson().toJson(subInfo);
                String retstr = HttpNetService.urlConnectionService("jsonDataInfo=" + subjson, "https://www.jiuyihtn.com:41041/broadcastLiveDataControlle/operLiveRoomDetails");
                NetRetEntity retEntity = JSON.parseObject(retstr, NetRetEntity.class);
                if (1 == retEntity.getResCode()) {
                    retjson = retstr;
                    retmsg = retEntity.getResMsg();
                    return true;
                } else {
                    retmsg = retEntity.getResMsg();
                }
            } catch (Exception e) {
                e.printStackTrace();
                retmsg = "提交异常";
            }
            return false;
        }

        @Override
        protected void onPostExecute(Boolean aBoolean) {
            if (aBoolean) {
                Toast.makeText(mContext, retmsg, Toast.LENGTH_SHORT).show();
                if (live_type.equals(LivePublisherActivity.LIVE_TYPE_HOTLIVE)) {
                    NetRetEntity retEntity = JSON.parseObject(retjson, NetRetEntity.class);
                    SubRoomResp retresp = JSON.parseObject(retEntity.getResJsonData(), SubRoomResp.class);
                    mdetailcode = retresp.getDetailsCode();
                    mApp.curdetailcode = mdetailcode;
                    Intent liveint = new Intent(mActivity, LivePublisherActivity.class);
                    liveint.putExtra("pushUrl", retresp.getPushUrl());
                    liveint.putExtra("chatRoomName", subInfo.getBroadcastTitle());
                    liveint.putExtra("liveTitle", subInfo.getBroadcastTitle());
                    liveint.putExtra("chatId", retresp.getChatRoomCode());
                    liveint.putExtra("detailCode", retresp.getDetailsCode());
                    liveint.putExtra("live_type", live_type);
                    mActivity.startActivity(liveint);
                    mActivity.finish();
                } else if (live_type.equals(LivePublisherActivity.LIVE_TYPE_PRELIVE)) {
                    mActivity.finish();
                }
            } else {
                Toast.makeText(mContext, retmsg, Toast.LENGTH_SHORT).show();
            }
            cacerProgress();
        }
    }

    class SubImgTask extends AsyncTask<Void, Void, Boolean> {
        CoverInfo coverInfo;

        SubImgTask(CoverInfo coverInfo) {
            this.coverInfo = coverInfo;
        }

        @Override
        protected Boolean doInBackground(Void... voids) {
            try {
                String subjson = new Gson().toJson(coverInfo);
                String retstr = HttpNetService.urlConnectionService("jsonDataInfo=" + subjson, "https://www.jiuyihtn.com:41041/broadcastLiveDataControlle/operLiveRoomCoverImg");
                NetRetEntity retEntity = JSON.parseObject(retstr, NetRetEntity.class);
                if (1 == retEntity.getResCode()) {
                    coverUrl = retEntity.getResData();
                    return true;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return false;
        }

        @Override
        protected void onPostExecute(Boolean aBoolean) {
            if (aBoolean) {

            }
            subInfo();
        }
    }
}
