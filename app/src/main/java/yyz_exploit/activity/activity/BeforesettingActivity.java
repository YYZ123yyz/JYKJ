package yyz_exploit.activity.activity;

import android.annotation.SuppressLint;
import android.app.DatePickerDialog;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.*;
import android.provider.MediaStore;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.*;

import com.alibaba.fastjson.JSON;
import com.bumptech.glide.Glide;
import com.google.gson.Gson;

import java.io.File;
import java.io.FileNotFoundException;
import java.net.URLEncoder;
import java.util.*;

//import com.jykj.live.lvb.liveroom.ui.LiveRoomActivity;
import entity.basicDate.ProvideBasicsDomain;
import entity.liveroom.*;
import netService.HttpNetService;
import netService.entity.NetRetEntity;
import www.jykj.com.jykj_zxyl.R;
import www.jykj.com.jykj_zxyl.activity.hyhd.LivePublisherActivity;
import www.jykj.com.jykj_zxyl.application.Constant;
import www.jykj.com.jykj_zxyl.application.JYKJApplication;
import www.jykj.com.jykj_zxyl.application.SharedPreferences_DataSave;
import www.jykj.com.jykj_zxyl.util.BitmapUtil;
import www.jykj.com.jykj_zxyl.util.DateUtils;
import www.jykj.com.jykj_zxyl.util.StrUtils;
import yyz_exploit.Utils.FlowLayout;
import yyz_exploit.bean.HelpBean;
import yyz_exploit.dialog.AuthorityDialog;
import yyz_exploit.dialog.ClassDialog;
import yyz_exploit.dialog.Lin_Dialog;
import yyz_exploit.dialog.Lin_Live_Dialog;

public class BeforesettingActivity extends AppCompatActivity implements View.OnClickListener {

    private TextView keyword,beforese_time;
    private ImageView before_back,back_beforese,fill_in;
    private LinearLayout lin,beforese_class,lin_live,lin_Authority;
    private Button beforese_confirm;
    private ImageView beforese_add,authority,lin_live_back,lin_authority_back;
    private Context mContext;
    private File mTempFile;              //声明一个拍照结果的临时文件
    private BeforesettingActivity mActivity;
    private ImageView lin_add,beforese_Features,class_back;
   private Bitmap mLin_add;
    private FlowLayout beforese_fl,Danger_fl;

    private Boolean wat=false;

    private String mNetLoginRetStr;
    private Handler mHandler;
    private NetRetEntity netRetEntity;

    private List<ProvideBasicsDomain> provideBasicsDomains = new ArrayList<>();

    //直播类目
    private List<ProvideBasicsDomain> list;
    //危险因素
    private List<ProvideBasicsDomain> danger;
    private List<ProvideBasicsDomain>  Doctors;
    private List<ProvideBasicsDomain> Patient;
    private Lin_Dialog lin_dialog;
    private Lin_Live_Dialog lin_live_dialog;
    private AuthorityDialog authorityDialog;
    private ClassDialog classDialog;
    private FlowLayout   bf_fl;
    private FlowLayout authority_fl;
    private TextView beforese_time1;
    private Boolean isDoctorSelected=true;
    private  SharedPreferences doctorAndPatientData;
    private   SharedPreferences.Editor edit;
    private TextView startLive;
    StringBuffer keycodesbuf = new StringBuffer();
    private final static int CHOOSE_KEY_RESULT = 4;
    String coverUrl;
    SubDataTask subDataTask;
    SubImgTask subImgTask;
    JYKJApplication mApp;
    StringBuffer keytextbuf = new StringBuffer();
    Map<String,ProvideBasicsDomain> classCodeMap = new HashMap();
    Map<String,ProvideBasicsDomain> riskCodeMap = new HashMap();
    Map<String,ProvideBasicsDomain> doctorWatchObjectAuthCodeMap = new HashMap();
    Map<String,ProvideBasicsDomain> patientWatchObjectAuthCodeMap = new HashMap();
    Map<String,ProvideBasicsDomain> attrCodeMap = new HashMap();
    public                  ProgressDialog              mDialogProgress =null;
    String mdetailcode = "9a10c583a51e4396a8e83bd97f4b5014";
    String selkeywords = "";
    String live_type = LivePublisherActivity.LIVE_TYPE_PRELIVE;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        live_type = StrUtils.defaulObjToStr(getIntent().getStringExtra("live_type"));
        mApp = (JYKJApplication)getApplication();
        setContentView(R.layout.activity_beforesetting);
        mContext = this;
        mActivity = this;
        initDir();
        initView();
        initHandler();
        lin_Dialog();
        doctorAndPatientData = getSharedPreferences("DoctorAndPatientData", MODE_PRIVATE);
        edit = doctorAndPatientData.edit();
        edit.putString("DoctorDta","-1");
        edit.putString("PatientData","-1").commit();

    }

    private void initView() {
        //返回
        before_back=findViewById(R.id.before_back);
        before_back.setOnClickListener(this);
        //直播主题
        fill_in=findViewById(R.id.fill_in);
        fill_in.setOnClickListener(this);
           //类目
        beforese_Features=findViewById(R.id.beforese_Features);
        beforese_Features.setOnClickListener(this);

            //权限
        authority=findViewById(R.id.authority);
        authority.setOnClickListener(this);

        //开始直播
        startLive=findViewById(R.id.startLive);
        startLive.setOnClickListener(this);
    }

    private void initDir() {
        // 声明目录
        File tempDir = new File(Environment.getExternalStorageDirectory().getAbsolutePath()
                +"/_tempphoto");
        if(!tempDir.exists()){
            tempDir.mkdirs();// 创建目录
        }
        mTempFile = new File(tempDir, BitmapUtil.getPhotoFileName());// 生成临时文件
    }
     //危险因素
    private void setOneFlowLayout() {
        //添加数据
        HashMap<String, String> map = new HashMap<>();
        map.put("baseCode", "60003");
        datas(map);
    }
    //直播类目
    private void setTwoFlowLayout() {
        //添加数据list
        HashMap<String, String> map = new HashMap<>();
        map.put("baseCode", "60002");
        data(map);
    }
        //医生权限
    private void setAuthority_flFlowLayout() {
        //添加数据list
        HashMap<String, String> map = new HashMap<>();
        map.put("baseCode", "60004");
        Doctors(map);
    }

    //患者权限
    private void setPatientFlowLayout() {
        //添加数据list
        HashMap<String, String> map = new HashMap<>();
        map.put("baseCode", "60005");
        Patient(map);
    }

    /**
     * 87      * 为每个view 添加点击事件
     * 88
     */
    @SuppressLint("ResourceAsColor")
    private void initEvents(final TextView tv,final int objtype) {

        tv.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                ProvideBasicsDomain parabean = (ProvideBasicsDomain)tv.getTag();
                if ("0".equals(parabean.getSelectState())) {
                    //edit.putString("DoctorDta",tv.getText().toString()).commit();
                    tv.setBackgroundResource(R.drawable.befirese_tvs);
                    tv.setTextColor(R.color.tabColor_press);
                    parabean.setSelectState("1");
                    tv.setTag(parabean);
                    if(1==objtype){
                        classCodeMap.put(StrUtils.defaulObjToStr(parabean.getAttrCode()),parabean);
                    }else if(2==objtype){
                        riskCodeMap.put(StrUtils.defaulObjToStr(parabean.getAttrCode()),parabean);
                    }else if(3==objtype){
                        doctorWatchObjectAuthCodeMap.put(StrUtils.defaulObjToStr(parabean.getAttrCode()),parabean);
                    }else if(4==objtype){
                        patientWatchObjectAuthCodeMap.put(StrUtils.defaulObjToStr(parabean.getAttrCode()),parabean);
                    }
                } else {
                    tv.setBackgroundResource(R.drawable.befirese_tv);
                    parabean.setSelectState("0");
                    tv.setTag(parabean);
                    if(1==objtype){
                        if(classCodeMap.containsKey(StrUtils.defaulObjToStr(parabean.getAttrCode())))
                            classCodeMap.remove(StrUtils.defaulObjToStr(parabean.getAttrCode()));
                    }else if(2==objtype){
                        if(riskCodeMap.containsKey(StrUtils.defaulObjToStr(parabean.getAttrCode())))
                            riskCodeMap.remove(StrUtils.defaulObjToStr(parabean.getAttrCode()));
                    }else if(3==objtype){
                        if(doctorWatchObjectAuthCodeMap.containsKey(StrUtils.defaulObjToStr(parabean.getAttrCode())))
                            doctorWatchObjectAuthCodeMap.remove(StrUtils.defaulObjToStr(parabean.getAttrCode()));
                    }else if(4==objtype){
                        if(patientWatchObjectAuthCodeMap.containsKey(StrUtils.defaulObjToStr(parabean.getAttrCode())))
                            patientWatchObjectAuthCodeMap.remove(StrUtils.defaulObjToStr(parabean.getAttrCode()));
                    }
                  //  tv.setTextColor(R.color.textColor_hztltabyj);
                }

            }
        });
    }

    /**
     *   获取进度条
     */

    public void getProgressBar(String title,String progressPrompt){
        if (mDialogProgress == null) {
            mDialogProgress = new ProgressDialog(this);
        }
        mDialogProgress.setTitle(title);
        mDialogProgress.setMessage(progressPrompt);
        mDialogProgress.setCancelable(false);
        mDialogProgress.show();
    }

    /**
     * 取消进度条
     */
    public void cacerProgress(){
        if (mDialogProgress != null) {
            mDialogProgress.dismiss();
        }
    }

    void subdata(){
        getProgressBar("数据提交","提交数据中...");
        if(null!=mLin_add) {
            CoverInfo thecover = new CoverInfo();
            thecover.setImgBase64Data(URLEncoder.encode("data:image/jpg;base64," + BitmapUtil.bitmaptoString(mLin_add)));
            thecover.setLoginUserPosition(mApp.loginDoctorPosition);
            thecover.setOperUserCode(mApp.mViewSysUserDoctorInfoAndHospital.getDoctorCode());
            thecover.setOperUserName(mApp.mViewSysUserDoctorInfoAndHospital.getUserName());
            thecover.setRequestClientType("1");
            subImgTask = new SubImgTask(thecover);
            subImgTask.execute();
        }else{
            subInfo();
        }
    }

    void subInfo(){
        String thetit = StrUtils.defaulObjToStr(((EditText)lin_dialog.findViewById(R.id.ed_theme)).getText());
        String thelivetime = StrUtils.defaulObjToStr(((TextView)lin_dialog.findViewById(R.id.beforese_time)).getText());
        StringBuffer classCodeBuffer = new StringBuffer();
        StringBuffer classCodeNameBuffer = new StringBuffer();
        StringBuffer riskCodeBuffer = new StringBuffer();
        StringBuffer riskCodeNameBuffer = new StringBuffer();
        StringBuffer authDoctorcodeBuffer = new StringBuffer();
        StringBuffer authDoctorNameBuffer = new StringBuffer();
        StringBuffer authPatientcodeBuffer = new StringBuffer();
        StringBuffer authPatientNameBuffer = new StringBuffer();
        Iterator it = null;
        String paritem = "";
        ProvideBasicsDomain thebean;
        if(!classCodeMap.isEmpty()){
            it = classCodeMap.keySet().iterator();
            while(it.hasNext()){
                paritem = StrUtils.defaulObjToStr(it.next());
                thebean = classCodeMap.get(paritem);
                if(classCodeBuffer.toString().length()>0){
                    classCodeBuffer.append("^");
                }
                if(classCodeNameBuffer.toString().length()>0){
                    classCodeNameBuffer.append("^");
                }
                classCodeBuffer.append(thebean.getAttrCode());
                classCodeNameBuffer.append(thebean.getAttrName());
            }
        }

        if(!riskCodeMap.isEmpty()){
            it = riskCodeMap.keySet().iterator();
            while(it.hasNext()){
                paritem = StrUtils.defaulObjToStr(it.next());
                thebean = riskCodeMap.get(paritem);
                if(riskCodeBuffer.toString().length()>0){
                    riskCodeBuffer.append("^");
                }
                if(riskCodeNameBuffer.toString().length()>0){
                    riskCodeNameBuffer.append("^");
                }
                riskCodeBuffer.append(thebean.getAttrCode());
                riskCodeNameBuffer.append(thebean.getAttrName());
            }
        }

        if(!doctorWatchObjectAuthCodeMap.isEmpty()){
            it = doctorWatchObjectAuthCodeMap.keySet().iterator();
            while(it.hasNext()){
                paritem = StrUtils.defaulObjToStr(it.next());
                thebean = doctorWatchObjectAuthCodeMap.get(paritem);
                if(authDoctorcodeBuffer.toString().length()>0){
                    authDoctorcodeBuffer.append("^");
                }
                if(authDoctorNameBuffer.toString().length()>0){
                    authDoctorNameBuffer.append("^");
                }
                authDoctorcodeBuffer.append(thebean.getAttrCode());
                authDoctorNameBuffer.append(thebean.getAttrName());
            }
        }

        if(!patientWatchObjectAuthCodeMap.isEmpty()){
            it = patientWatchObjectAuthCodeMap.keySet().iterator();
            while(it.hasNext()){
                paritem = StrUtils.defaulObjToStr(it.next());
                thebean = patientWatchObjectAuthCodeMap.get(paritem);
                if(authPatientcodeBuffer.toString().length()>0){
                    authPatientcodeBuffer.append("^");
                }
                if(authPatientNameBuffer.toString().length()>0){
                    authPatientNameBuffer.append("^");
                }
                authPatientcodeBuffer.append(thebean.getAttrCode());
                authPatientNameBuffer.append(thebean.getAttrName());
            }
        }

        LiveRoomInfo subinfo = new LiveRoomInfo();
        subinfo.setLoginUserPosition(mApp.loginDoctorPosition);
        subinfo.setRequestClientType("1");
        subinfo.setOperUserCode(mApp.mViewSysUserDoctorInfoAndHospital.getDoctorCode());
        subinfo.setOperUserName(mApp.mViewSysUserDoctorInfoAndHospital.getUserName());
        subinfo.setAttrCode(keycodesbuf.toString());
        subinfo.setAttrName(keytextbuf.toString());
        if(StrUtils.defaulObjToStr(coverUrl).length()>0) {
            subinfo.setBroadcastCoverImgUrl(coverUrl);
        }
        if(thelivetime.length()>0) {
            subinfo.setBroadcastDate(thelivetime);
        }
        subinfo.setBroadcastTitle(thetit);
        subinfo.setBroadcastState(live_type);
        subinfo.setBroadcastType("1");
        subinfo.setClassCode(classCodeBuffer.toString());
        subinfo.setClassName(classCodeNameBuffer.toString());
        subinfo.setRiskCode(riskCodeBuffer.toString());
        subinfo.setRiskName(riskCodeNameBuffer.toString());
        subinfo.setDoctorWatchObjectAuthCode(authDoctorcodeBuffer.toString());
        subinfo.setDoctorWatchObjectAuthName(authDoctorNameBuffer.toString());
        subinfo.setPatientWatchObjectAuthCode(authPatientcodeBuffer.toString());
        subinfo.setPatientWatchObjectAuthName(authPatientNameBuffer.toString());
        subDataTask = new SubDataTask(subinfo);
        subDataTask.execute();
    }


    @Override
    public void onClick(View v) {
        switch (v.getId()){
            case R.id.before_back:
                finish();
                break;
                //直播主题dialog
            case R.id.fill_in:
                lin_Dialog();
                break;
                //直播类目
            case  R.id.beforese_Features:
                lin_Live_Dialog();
                break;
                //权限
            case R.id.authority:
                authorityDialog = new AuthorityDialog(this);
                authorityDialog.show();
                String doctorDta = doctorAndPatientData.getString("DoctorDta", "");
                Log.e("ASS1",doctorDta);
                setAuthority_flFlowLayout();
                if(isDoctorSelected){//医生是否被选中
                    //todo Doctors  改变字体背景

                    //doctorDta  item默认选择index
                }else{
                    //todo patient

                }
                authority_fl = authorityDialog.findViewById(R.id.authority_fl);
              //  setPatientFlowLayout();
                authorityDialog.findViewById(R.id.lin_authority_back).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        authorityDialog.dismiss();
                    }
                });
                //医生
                authorityDialog.findViewById(R.id.Doctors).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        //todo 改变字体背景  取消另一个的背景颜色和字体颜色
                        isDoctorSelected=true;
                        setAuthority_flFlowLayout();
                    }
                });
                //患者
                authorityDialog.findViewById(R.id.patient).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        //todo 改变字体背景  取消另一个的背景颜色和字体颜色
                        isDoctorSelected=false;
                        setPatientFlowLayout();
                    }
                });
                //关闭
                authorityDialog.findViewById(R.id.lin_authority_back).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        authorityDialog.dismiss();
                    }
                });
                authorityDialog.setOnDismissListener(new DialogInterface.OnDismissListener() {
                    @Override
                    public void onDismiss(DialogInterface dialog) {
                        String doctorDta = doctorAndPatientData.getString("DoctorDta", "");
                        Log.e("ASS2",doctorDta+"");
                    }
                });
                break;
            case R.id.startLive:
                /*Intent goliveintent = new Intent(BeforesettingActivity.this, LiveRoomActivity.class);
                goliveintent.putExtra("TITLE", "我的直播");
                goliveintent.putExtra("TYPE",0);
                startActivity(goliveintent);*/
                subdata();
                break;
        }
    }


    //直播类目
    private void lin_Live_Dialog() {
        lin_live_dialog = new Lin_Live_Dialog(this);
        lin_live_dialog.show();
        lin_live_dialog.findViewById(R.id.lin_live_back).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                lin_live_dialog.dismiss();
            }
        });
        //直播类目数据展示
        bf_fl = lin_live_dialog.findViewById(R.id.beforese_fl);
        //危险因素
        Danger_fl= lin_live_dialog.findViewById(R.id.Danger_fl);
        //直播类目
        setTwoFlowLayout();
        // 危险因素
        setOneFlowLayout();

      //  lin_dialog.dismiss();
    }
    //直播类目
    @SuppressLint("ResourceAsColor")
    private void addTextView(ProvideBasicsDomain parabean) {
        TextView child = new TextView(this);
        ViewGroup.MarginLayoutParams params = new ViewGroup.MarginLayoutParams(ViewGroup.MarginLayoutParams.WRAP_CONTENT, ViewGroup.MarginLayoutParams.WRAP_CONTENT);
        params.setMargins(5, 5, 5, 5);
        child.setLayoutParams(params);
        child.setBackgroundResource(R.drawable.befirese_tv);
        child.setText(parabean.getAttrName());
        child.setTag(parabean);
        if(classCodeMap.containsKey(parabean.getAttrCode())){
            child.setBackgroundResource(R.drawable.befirese_tvs);
            child.setTextColor(R.color.tabColor_press);
        }
        //child    child.setTextColor(R.color.textColor_vo);
        initEvents(child,1);//监听  provideBasicsDomains

        //添加点击事件，也是实现显示selector的效果的一种方式
        bf_fl.addView(child);
    }

    //危险因素
    @SuppressLint("ResourceAsColor")
    private void addTextViews(ProvideBasicsDomain parabean) {
        TextView child = new TextView(this);
        ViewGroup.MarginLayoutParams params = new ViewGroup.MarginLayoutParams(ViewGroup.MarginLayoutParams.WRAP_CONTENT, ViewGroup.MarginLayoutParams.WRAP_CONTENT);
        params.setMargins(5, 5, 5, 5);
        child.setLayoutParams(params);
        child.setBackgroundResource(R.drawable.befirese_tv);
        child.setText(parabean.getAttrName());
        child.setTag(parabean);
        if(riskCodeMap.containsKey(parabean.getAttrCode())){
            child.setBackgroundResource(R.drawable.befirese_tvs);
            child.setTextColor(R.color.tabColor_press);
        }
        //    child.setTextColor(R.color.textColor_vo);
        initEvents(child,2);//监听
        Danger_fl.addView(child);

    }

    //医生权限
    @SuppressLint("ResourceAsColor")
    private void addDoctors(ProvideBasicsDomain parabean) {
        TextView child = new TextView(this);
        ViewGroup.MarginLayoutParams params = new ViewGroup.MarginLayoutParams(ViewGroup.MarginLayoutParams.WRAP_CONTENT, ViewGroup.MarginLayoutParams.WRAP_CONTENT);
        params.setMargins(5, 5, 5, 5);
        child.setLayoutParams(params);
        child.setBackgroundResource(R.drawable.befirese_tv);
        child.setText(parabean.getAttrName());
        child.setTag(parabean);
        if(doctorWatchObjectAuthCodeMap.containsKey(parabean.getAttrCode())){
            child.setBackgroundResource(R.drawable.befirese_tvs);
            child.setTextColor(R.color.tabColor_press);
        }
        //    child.setTextColor(R.color.textColor_vo);
        initEvents(child,3);//监听
        authority_fl.addView(child);

    }

    //医生权限
    @SuppressLint("ResourceAsColor")
    private void addPatient(ProvideBasicsDomain parabean) {
        TextView child = new TextView(this);
        ViewGroup.MarginLayoutParams params = new ViewGroup.MarginLayoutParams(ViewGroup.MarginLayoutParams.WRAP_CONTENT, ViewGroup.MarginLayoutParams.WRAP_CONTENT);
        params.setMargins(5, 5, 5, 5);
        child.setLayoutParams(params);
        child.setBackgroundResource(R.drawable.befirese_tv);
        child.setText(parabean.getAttrName());
        child.setTag(parabean);
        if(patientWatchObjectAuthCodeMap.containsKey(parabean.getAttrCode())){
            child.setBackgroundResource(R.drawable.befirese_tvs);
            child.setTextColor(R.color.tabColor_press);
        }
        //    child.setTextColor(R.color.textColor_vo);
        initEvents(child,4);//监听
        authority_fl.addView(child);
    }
    //直播主题dialog
    private void lin_Dialog() {
        lin_dialog = new Lin_Dialog(this);
        lin_dialog.show();
        //关闭
        lin_dialog.findViewById(R.id.back_beforese).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                lin_dialog.dismiss();
            }
        });
        //相机相册选择
        lin_dialog.findViewById(R.id.beforese_add).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String[] items = {"拍照", "从相册选择"};
                Dialog dialog = new android.support.v7.app.AlertDialog.Builder(mContext)
                        .setItems(items, new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialogInterface, int i) {
                                switch (i) {
                                    case 0:
                                        StrictMode.VmPolicy.Builder builder = new StrictMode.VmPolicy.Builder();
                                        StrictMode.setVmPolicy(builder.build());
                                        builder.detectFileUriExposure();
                                        // 添加Action类型：MediaStore.ACTION_IMAGE_CAPTURE
                                        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                                        // 指定调用相机拍照后照片(结果)的储存路径
                                        intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(mTempFile));
                                        // 等待返回结果
                                        startActivityForResult(intent, Constant.SELECT_PIC_BY_TACK_PHOTO);
                                        break;
                                    case 1:
                                        BitmapUtil.selectAlbum(BeforesettingActivity.this);//从相册选择
                                        break;
                                }
                            }
                        }).show();
            }
        });
      //时间选择
        lin_dialog.findViewById(R.id.beforese_time).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showBirthDayChoiceDialog();
            }
        });
     //确认按钮
      lin_dialog.findViewById( R.id.beforese_confirm) .setOnClickListener(new View.OnClickListener() {
          @Override
          public void onClick(View v) {
              lin_dialog.dismiss();
              classDialog = new ClassDialog(BeforesettingActivity.this);
              TextView choose_live_class = classDialog.findViewById(R.id.choose_live_class);
              TextView choose_danger_factor = classDialog.findViewById(R.id.choose_danger_factor);
              TextView choose_doctor_auth = classDialog.findViewById(R.id.choose_doctor_auth);
              TextView choose_patient_auth = classDialog.findViewById(R.id.choose_patient_auth);
              StringBuffer classCodeNameBuffer = new StringBuffer();
              StringBuffer authDoctorNameBuffer = new StringBuffer();
              StringBuffer authPatientNameBuffer = new StringBuffer();
              StringBuffer riskCodeNameBuffer = new StringBuffer();
              Iterator it = null;
              String paritem = "";
              ProvideBasicsDomain thebean;
              if(!classCodeMap.isEmpty()){
                  it = classCodeMap.keySet().iterator();
                  while(it.hasNext()){
                      paritem = StrUtils.defaulObjToStr(it.next());
                      thebean = classCodeMap.get(paritem);
                      if(classCodeNameBuffer.toString().length()>0){
                          classCodeNameBuffer.append(",");
                      }
                      classCodeNameBuffer.append(thebean.getAttrName());
                  }
              }
              if(!riskCodeMap.isEmpty()){
                  it = riskCodeMap.keySet().iterator();
                  while(it.hasNext()){
                      paritem = StrUtils.defaulObjToStr(it.next());
                      thebean = riskCodeMap.get(paritem);
                      if(riskCodeNameBuffer.toString().length()>0){
                          riskCodeNameBuffer.append(",");
                      }
                      riskCodeNameBuffer.append(thebean.getAttrName());
                  }
              }
              if(!doctorWatchObjectAuthCodeMap.isEmpty()){
                  it = doctorWatchObjectAuthCodeMap.keySet().iterator();
                  while(it.hasNext()){
                      paritem = StrUtils.defaulObjToStr(it.next());
                      thebean = doctorWatchObjectAuthCodeMap.get(paritem);
                      if(authDoctorNameBuffer.toString().length()>0){
                          authDoctorNameBuffer.append(",");
                      }
                      authDoctorNameBuffer.append(thebean.getAttrName());
                  }
              }

              if(!patientWatchObjectAuthCodeMap.isEmpty()){
                  it = patientWatchObjectAuthCodeMap.keySet().iterator();
                  while(it.hasNext()){
                      paritem = StrUtils.defaulObjToStr(it.next());
                      thebean = patientWatchObjectAuthCodeMap.get(paritem);
                      if(authPatientNameBuffer.toString().length()>0){
                          authPatientNameBuffer.append(",");
                      }
                      authPatientNameBuffer.append(thebean.getAttrName());
                  }
              }
              choose_live_class.setText(classCodeNameBuffer.toString());
              choose_danger_factor.setText(riskCodeNameBuffer.toString());
              choose_doctor_auth.setText(authDoctorNameBuffer.toString());
              choose_patient_auth.setText(authPatientNameBuffer.toString());
              classDialog.show();
              classDialog.findViewById(R.id.class_back).setOnClickListener(new View.OnClickListener() {
                  @Override
                  public void onClick(View v) {
                      classDialog.dismiss();
                  }
              });
          }
      });
      //直播关键字
        lin_dialog.findViewById(R.id.Keyword).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(BeforesettingActivity.this, KeywordActivity.class);
                intent.putExtra("selkeywords",selkeywords);
                startActivityForResult(intent,CHOOSE_KEY_RESULT);
            }
        });

    }



    /**
     * 选择日期
     */
    private void showBirthDayChoiceDialog() {
        Calendar nowdate = Calendar.getInstance();
        int mYear = nowdate.get(Calendar.YEAR);
        int mMonth = nowdate.get(Calendar.MONTH);
        int mDay = nowdate.get(Calendar.DAY_OF_MONTH);
        new DatePickerDialog(mContext, onDateSetListener, mYear, mMonth, mDay).show();
    }

    private DatePickerDialog.OnDateSetListener onDateSetListener = new DatePickerDialog.OnDateSetListener() {

        @Override
        public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {
            int mYear = year;
            int mMonth = monthOfYear + 1;
            int mDay = dayOfMonth;
            String month = "";
            String day = "";
//            TextView date_textview = (TextView) findViewById(R.id.changebirth_textview);
            String days;
            if (mMonth < 10)
                month = "0" + mMonth;
            else
                month = mMonth + "";
            if (mDay < 10)
                day = "0" + mDay;
            else
                day = mDay + "";
            beforese_time=lin_dialog.findViewById(R.id.beforese_time);
            beforese_time.setText(mYear + "-" + month + "-" + day);
         //   mProvideViewSysUserDoctorInfoAndHospital.setBirthdayStr(mYear + "-" + month + "-" + day);
            System.out.println();
        }
    };


    @Override
    protected void onActivityResult(
            int requestCode,  // 请求码 自定义
            int resultCode,  // 结果码 成功 -1 == OK
            Intent data) { // 数据 ? 可以没有
        try {

            // 如果是直接从相册获取
            if (requestCode == Constant.SELECT_PIC_FROM_ALBUM
                    && resultCode == RESULT_OK
                    && data != null) {

                final Uri uri = data.getData();//返回相册图片的Uri
                BitmapUtil.startPhotoZoom(mActivity, uri, 450);
            }

            // 处理拍照返回
            if (requestCode == Constant.SELECT_PIC_BY_TACK_PHOTO
                    && resultCode == RESULT_OK) {// 拍照成功 RESULT_OK= -1
                // 剪裁图片
                BitmapUtil.startPhotoZoom(mActivity, Uri.fromFile(mTempFile), 450);
            }
            // 接收剪裁回来的结果
            if (requestCode == Constant.REQUEST_PHOTO_CUT
                    && resultCode == RESULT_OK) {// 剪裁加工成功
                //让剪裁结果显示到图片框
                setPicToView(data);
            }
            if(requestCode == CHOOSE_KEY_RESULT){
                selkeywords = StrUtils.defaulObjToStr(data.getStringExtra("choosekeys"));
                keytextbuf = new StringBuffer();
                if(selkeywords.length()>1){
                    List<Keyword> thelist = JSON.parseArray(selkeywords,Keyword.class);
                    keycodesbuf = new StringBuffer();
                    for(int i=0;i<thelist.size();i++){
                        Keyword thekey = thelist.get(i);
                        if(keycodesbuf.toString().length()>0){
                            keycodesbuf.append("^");
                        }
                        keycodesbuf.append(thekey.getKeywordsCode());
                        if(keytextbuf.toString().length()>0){
                            keytextbuf.append(",");
                        }
                        keytextbuf.append(thekey.getKeywordsName());
                    }
                }
                ((TextView)lin_dialog.findViewById(R.id.Keyword)).setText(keytextbuf.toString());
            }
        } catch (Exception e) {
            Log.i("yi", "yichahahaha");
        }
        super.onActivityResult(requestCode, resultCode, data);
    }

    public void setPicToView(Intent data) {
        Bitmap photo;
        try {
            Uri u = data.getData();
            if (u != null) {
                photo = BitmapFactory.decodeStream(getContentResolver().openInputStream(data.getData()));//将imageUri对象的图片加载到内存
            } else {
                System.out.println("进来了");
                photo = BitmapFactory.decodeStream(getContentResolver().openInputStream(Uri.fromFile(new File(Environment.getExternalStorageDirectory(), "test.jpg"))));//将imageUri对象的图片加载到内存
            }
            System.out.println("图片：" + photo);
            mLin_add= photo;

            //显示图片
//            mUserHeadImage.setImageBitmap(photo);
            lin_add=lin_dialog.findViewById(R.id.lin_add);
            Glide.with(this).load(photo).into(lin_add);

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }

    private void data(HashMap<String, String> map) {

        new Thread() {
            public void run() {
                try {
                    mNetLoginRetStr = HttpNetService.urlConnectionService("jsonDataInfo=" + new Gson().toJson(map) , Constant.SERVICEURL + "basicDataController/getBasicsDomain");
                    Log.e("tag", "直播类目 "+mNetLoginRetStr );
                } catch (Exception e) {
                    NetRetEntity retEntity = new NetRetEntity();
                    retEntity.setResCode(0);
                    retEntity.setResMsg("网络连接异常，请联系管理员：" + e.getMessage());
                    mNetLoginRetStr = new Gson().toJson(retEntity);
                    e.printStackTrace();
                }
                netRetEntity = JSON.parseObject(mNetLoginRetStr, NetRetEntity.class);

                mHandler.sendEmptyMessage(1);
            }
        }.start();
    }

    private void datas(HashMap<String, String> map) {

        new Thread() {
            public void run() {
                try {
                    mNetLoginRetStr = HttpNetService.urlConnectionService("jsonDataInfo=" + new Gson().toJson(map) , Constant.SERVICEURL + "basicDataController/getBasicsDomain");
                    Log.e("tag", "run:2222 "+mNetLoginRetStr );
                } catch (Exception e) {
                    NetRetEntity retEntity = new NetRetEntity();
                    retEntity.setResCode(0);
                    retEntity.setResMsg("网络连接异常，请联系管理员：" + e.getMessage());
                    mNetLoginRetStr = new Gson().toJson(retEntity);
                    e.printStackTrace();

                }
                netRetEntity = JSON.parseObject(mNetLoginRetStr, NetRetEntity.class);

                mHandler.sendEmptyMessage(2);
            }
        }.start();
    }

    private void Doctors(HashMap<String, String> map) {

        new Thread() {
            public void run() {
                try {
                    mNetLoginRetStr = HttpNetService.urlConnectionService("jsonDataInfo=" + new Gson().toJson(map) , Constant.SERVICEURL + "basicDataController/getBasicsDomain");
                    Log.e("tag", "run:3333 "+mNetLoginRetStr );
                } catch (Exception e) {
                    NetRetEntity retEntity = new NetRetEntity();
                    retEntity.setResCode(0);
                    retEntity.setResMsg("网络连接异常，请联系管理员：" + e.getMessage());
                    mNetLoginRetStr = new Gson().toJson(retEntity);
                    e.printStackTrace();

                }
                netRetEntity = JSON.parseObject(mNetLoginRetStr, NetRetEntity.class);

                mHandler.sendEmptyMessage(3);
            }
        }.start();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if(StrUtils.defaulObjToStr(mdetailcode).length()>0){
            CloseRoomInfo subinfo = new CloseRoomInfo();
            subinfo.setDetailsCode(mdetailcode);
            subinfo.setLoginUserPosition(mApp.loginDoctorPosition);
            subinfo.setOperUserCode(mApp.mViewSysUserDoctorInfoAndHospital.getDoctorCode());
            subinfo.setOperUserName(mApp.mViewSysUserDoctorInfoAndHospital.getUserName());
            subinfo.setRequestClientType("1");
            CloseLiveRoomTask closeLiveRoomTask = new CloseLiveRoomTask(subinfo);
            closeLiveRoomTask.execute();
        }
    }

    class CloseLiveRoomTask extends AsyncTask<Void,Void,Boolean>{
        CloseRoomInfo subinfo;
        String retmsg = "";
        CloseLiveRoomTask(CloseRoomInfo subinfo){
            this.subinfo =  subinfo;
        }

        @Override
        protected Boolean doInBackground(Void... voids) {
            try {
                String retstr = HttpNetService.urlConnectionService("jsonDataInfo="+new Gson().toJson(subinfo),"https://www.jiuyihtn.com:41041/broadcastLiveDataControlle/operLiveRoomDetailsNoticeResCloseBroadcasting");
                NetRetEntity retEntity = JSON.parseObject(retstr,NetRetEntity.class);
                if(1==retEntity.getResCode()){
                    retmsg = retEntity.getResMsg();
                    return true;
                }else{
                    retmsg = retEntity.getResMsg();
                }
            } catch (Exception e) {
                e.printStackTrace();
                retmsg = "数据存储异常";
            }

            return false;
        }

        @Override
        protected void onPostExecute(Boolean aBoolean) {
            if(!aBoolean){
                Toast.makeText(mContext,retmsg,Toast.LENGTH_SHORT).show();
            }
        }
    }

    private void Patient(HashMap<String, String> map) {

        new Thread() {
            public void run() {
                try {
                    mNetLoginRetStr = HttpNetService.urlConnectionService("jsonDataInfo=" + new Gson().toJson(map) , Constant.SERVICEURL + "basicDataController/getBasicsDomain");
                    Log.e("tag", "run:3333 "+mNetLoginRetStr );
                } catch (Exception e) {
                    NetRetEntity retEntity = new NetRetEntity();
                    retEntity.setResCode(0);
                    retEntity.setResMsg("网络连接异常，请联系管理员：" + e.getMessage());
                    mNetLoginRetStr = new Gson().toJson(retEntity);
                    e.printStackTrace();

                }
                netRetEntity = JSON.parseObject(mNetLoginRetStr, NetRetEntity.class);

                mHandler.sendEmptyMessage(4);
            }
        }.start();
    }

    @SuppressLint("HandlerLeak")
    private void initHandler() {
        mHandler = new Handler() {
            @SuppressLint("HandlerLeak")
            @Override
            public void handleMessage(Message msg) {
                switch (msg.what) {
                    case 1:
                        if (mNetLoginRetStr != null && !mNetLoginRetStr.equals("")) {
                            provideBasicsDomains = JSON.parseArray(JSON.parseObject(mNetLoginRetStr,NetRetEntity.class).getResJsonData(),ProvideBasicsDomain.class);
                            list=new ArrayList<>();
                            for (int i=0;i<provideBasicsDomains.size();i++){
                                list.add( provideBasicsDomains.get(i));
                            }
                            for (int i = 0; i <list.size(); i++) {
                                addTextView(list.get(i));
                            }
                        }

                        break;

                    case 2:
                        if (mNetLoginRetStr != null && !mNetLoginRetStr.equals("")) {
                            provideBasicsDomains = JSON.parseArray(JSON.parseObject(mNetLoginRetStr,NetRetEntity.class).getResJsonData(),ProvideBasicsDomain.class);
                           danger=new ArrayList<>();
                            for (int i=0;i<provideBasicsDomains.size();i++){
                                danger.add( provideBasicsDomains.get(i));
                           }
                            for (int i = 0; i <danger.size(); i++) {
                                addTextViews(danger.get(i));
                            }
                        }
                        break;
                    case 3:
                        if (mNetLoginRetStr != null && !mNetLoginRetStr.equals("")) {
                            provideBasicsDomains = JSON.parseArray(JSON.parseObject(mNetLoginRetStr,NetRetEntity.class).getResJsonData(),ProvideBasicsDomain.class);
                            Doctors=new ArrayList<>();
                            authority_fl.removeAllViews();
                            for (int i=0;i<provideBasicsDomains.size();i++){
                                Doctors.add( provideBasicsDomains.get(i));
                            }
                            for (int i = 0; i <Doctors.size(); i++) {
                                addDoctors(Doctors.get(i));
                            }
                        }
                        break;
                    case 4:
                        if (mNetLoginRetStr != null && !mNetLoginRetStr.equals("")) {
                            provideBasicsDomains = JSON.parseArray(JSON.parseObject(mNetLoginRetStr,NetRetEntity.class).getResJsonData(),ProvideBasicsDomain.class);
                            authority_fl.removeAllViews();
                            Patient=new ArrayList<>();
                            for (int i=0;i<provideBasicsDomains.size();i++){
                                Patient.add( provideBasicsDomains.get(i));
                            }
                        //    authority_fl
                            for (int i = 0; i <Patient.size(); i++) {
                                addPatient(Patient.get(i));
                            }
                        }
                        break;
                }
            }
        };
    }

    class SubDataTask extends AsyncTask<Void,Void, Boolean>{
        LiveRoomInfo subInfo;
        String retjson = "";
        String retmsg = "";
        SubDataTask(LiveRoomInfo subInfo){
            this.subInfo = subInfo;
        }
        @Override
        protected Boolean doInBackground(Void... voids) {
            try {
                String subjson = new Gson().toJson(subInfo);
                String retstr = HttpNetService.urlConnectionService("jsonDataInfo="+subjson,"https://www.jiuyihtn.com:41041/broadcastLiveDataControlle/operLiveRoomDetails");
                NetRetEntity retEntity = JSON.parseObject(retstr,NetRetEntity.class);
                if(1==retEntity.getResCode()){
                    retjson = retstr;
                    retmsg =  retEntity.getResMsg();
                    return true;
                }else{
                    retmsg =  retEntity.getResMsg();
                }
            } catch (Exception e) {
                e.printStackTrace();
                retmsg = "提交异常";
            }
            return false;
        }

        @Override
        protected void onPostExecute(Boolean aBoolean) {
            if(aBoolean){
                Toast.makeText(mContext,retmsg,Toast.LENGTH_SHORT).show();
                NetRetEntity retEntity = JSON.parseObject(retjson,NetRetEntity.class);
                SubRoomResp retresp = JSON.parseObject(retEntity.getResJsonData(),SubRoomResp.class);
                mdetailcode = retresp.getDetailsCode();
                mApp.curdetailcode = mdetailcode;
                Intent liveint = new Intent(mActivity, LivePublisherActivity.class);
                liveint.putExtra("pushUrl",retresp.getPushUrl());
                liveint.putExtra("chatRoomName",subInfo.getBroadcastTitle());
                liveint.putExtra("liveTitle",subInfo.getBroadcastTitle());
                liveint.putExtra("chatId",retresp.getChatRoomCode());
                liveint.putExtra("detailCode",retresp.getDetailsCode());
                liveint.putExtra("detailCode",retresp.getDetailsCode());
                liveint.putExtra("live_type",live_type);
                mActivity.startActivity(liveint);
            }else{
                Toast.makeText(mContext,retmsg,Toast.LENGTH_SHORT).show();
            }
            cacerProgress();
        }
    }

    class SubImgTask extends AsyncTask<Void,Void,Boolean>{
        CoverInfo coverInfo;
        SubImgTask(CoverInfo coverInfo){
            this.coverInfo = coverInfo;
        }

        @Override
        protected Boolean doInBackground(Void... voids) {
            try {
                String subjson = new Gson().toJson(coverInfo);
                String retstr = HttpNetService.urlConnectionService("jsonDataInfo="+subjson,"https://www.jiuyihtn.com:41041/broadcastLiveDataControlle/operLiveRoomCoverImg");
                NetRetEntity retEntity = JSON.parseObject(retstr,NetRetEntity.class);
                if(1==retEntity.getResCode()){
                    coverUrl = retEntity.getResData();
                    return true;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return false;
        }

        @Override
        protected void onPostExecute(Boolean aBoolean) {
            if(aBoolean){

            }
            subInfo();
        }
    }
}
