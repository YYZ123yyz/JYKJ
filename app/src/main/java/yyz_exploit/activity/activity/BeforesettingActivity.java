package yyz_exploit.activity.activity;

import android.annotation.SuppressLint;
import android.app.DatePickerDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.os.StrictMode;
import android.provider.MediaStore;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.alibaba.fastjson.JSON;
import com.bumptech.glide.Glide;
import com.google.gson.Gson;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;

import entity.basicDate.ProvideBasicsDomain;
import netService.HttpNetService;
import netService.entity.NetRetEntity;
import www.jykj.com.jykj_zxyl.R;
import www.jykj.com.jykj_zxyl.application.Constant;
import www.jykj.com.jykj_zxyl.application.JYKJApplication;
import www.jykj.com.jykj_zxyl.application.SharedPreferences_DataSave;
import www.jykj.com.jykj_zxyl.util.BitmapUtil;
import yyz_exploit.Utils.FlowLayout;
import yyz_exploit.bean.HelpBean;
import yyz_exploit.dialog.AuthorityDialog;
import yyz_exploit.dialog.ClassDialog;
import yyz_exploit.dialog.Lin_Dialog;
import yyz_exploit.dialog.Lin_Live_Dialog;

public class BeforesettingActivity extends AppCompatActivity implements View.OnClickListener {

    private TextView keyword,beforese_time;
    private ImageView before_back,back_beforese,fill_in;
    private LinearLayout lin,beforese_class,lin_live,lin_Authority;
    private Button beforese_confirm;
    private ImageView beforese_add,authority,lin_live_back,lin_authority_back;
    private Context mContext;
    private File mTempFile;              //声明一个拍照结果的临时文件
    private BeforesettingActivity mActivity;
    private ImageView lin_add,beforese_Features,class_back;
   private Bitmap mLin_add;
    private FlowLayout beforese_fl,Danger_fl;

    private Boolean wat=false;

    private String mNetLoginRetStr;
    private Handler mHandler;
    private NetRetEntity netRetEntity;

    private List<ProvideBasicsDomain> provideBasicsDomains = new ArrayList<>();

    //直播类目
    private List<ProvideBasicsDomain> list;
    //危险因素
    private List<ProvideBasicsDomain> danger;
    private List<ProvideBasicsDomain>  Doctors;
    private List<ProvideBasicsDomain> Patient;
    private Lin_Dialog lin_dialog;
    private Lin_Live_Dialog lin_live_dialog;
    private AuthorityDialog authorityDialog;
    private ClassDialog classDialog;
    private FlowLayout   bf_fl;
    private FlowLayout authority_fl;
    private TextView beforese_time1;
    private Boolean isDoctorSelected=true;
    private  SharedPreferences doctorAndPatientData;
    private   SharedPreferences.Editor edit;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_beforesetting);
        mContext = this;
        mActivity = this;
        initView();
        initHandler();
        lin_Dialog();
        doctorAndPatientData = getSharedPreferences("DoctorAndPatientData", MODE_PRIVATE);
        edit = doctorAndPatientData.edit();
        edit.putString("DoctorDta","-1");
        edit.putString("PatientData","-1").commit();

    }

    private void initView() {
        //返回
        before_back=findViewById(R.id.before_back);
        before_back.setOnClickListener(this);
        //直播主题
        fill_in=findViewById(R.id.fill_in);
        fill_in.setOnClickListener(this);
           //类目
        beforese_Features=findViewById(R.id.beforese_Features);
        beforese_Features.setOnClickListener(this);

            //权限
        authority=findViewById(R.id.authority);
        authority.setOnClickListener(this);
    }
     //危险因素
    private void setOneFlowLayout() {
        //添加数据
        HashMap<String, String> map = new HashMap<>();
        map.put("baseCode", "60003");
        datas(map);
    }
    //直播类目
    private void setTwoFlowLayout() {
        //添加数据list
        HashMap<String, String> map = new HashMap<>();
        map.put("baseCode", "60002");
        data(map);
    }
        //医生权限
    private void setAuthority_flFlowLayout() {
        //添加数据list
        HashMap<String, String> map = new HashMap<>();
        map.put("baseCode", "60004");
        Doctors(map);
    }

    //患者权限
    private void setPatientFlowLayout() {
        //添加数据list
        HashMap<String, String> map = new HashMap<>();
        map.put("baseCode", "60005");
        Patient(map);
    }

    /**
     * 87      * 为每个view 添加点击事件
     * 88
     */
    @SuppressLint("ResourceAsColor")
    private void initEvents(final TextView tv) {

        tv.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                wat = !wat;
                if (wat) {
                    edit.putString("DoctorDta",tv.getText().toString()).commit();
                    tv.setBackgroundResource(R.drawable.befirese_tvs);
                    tv.setTextColor(R.color.tabColor_press);
                } else {
                    tv.setBackgroundResource(R.drawable.befirese_tv);
                  //  tv.setTextColor(R.color.textColor_hztltabyj);
                }
            }
        });
    }



    @Override
    public void onClick(View v) {
        switch (v.getId()){
            case R.id.before_back:
                finish();
                break;
                //直播主题dialog
            case R.id.fill_in:
                lin_Dialog();
                break;
                //直播类目
            case  R.id.beforese_Features:
                lin_Live_Dialog();
                break;
                //权限
            case R.id.authority:
                authorityDialog = new AuthorityDialog(this);
                authorityDialog.show();
                String doctorDta = doctorAndPatientData.getString("DoctorDta", "");
                Log.e("ASS1",doctorDta);
                setAuthority_flFlowLayout();
                if(isDoctorSelected){//医生是否被选中
                    //todo Doctors  改变字体背景

                    //doctorDta  item默认选择index
                }else{
                    //todo patient

                }
                authority_fl = authorityDialog.findViewById(R.id.authority_fl);
              //  setPatientFlowLayout();
                authorityDialog.findViewById(R.id.lin_authority_back).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        authorityDialog.dismiss();
                    }
                });
                //医生
                authorityDialog.findViewById(R.id.Doctors).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        //todo 改变字体背景  取消另一个的背景颜色和字体颜色
                        isDoctorSelected=true;
                        setAuthority_flFlowLayout();
                    }
                });
                //患者
                authorityDialog.findViewById(R.id.patient).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        //todo 改变字体背景  取消另一个的背景颜色和字体颜色
                        isDoctorSelected=false;
                        setPatientFlowLayout();
                    }
                });
                //关闭
                authorityDialog.findViewById(R.id.lin_authority_back).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        authorityDialog.dismiss();
                    }
                });
                authorityDialog.setOnDismissListener(new DialogInterface.OnDismissListener() {
                    @Override
                    public void onDismiss(DialogInterface dialog) {
                        String doctorDta = doctorAndPatientData.getString("DoctorDta", "");
                        Log.e("ASS2",doctorDta+"");
                    }
                });
                break;
        }
    }


    //直播类目
    private void lin_Live_Dialog() {
        lin_live_dialog = new Lin_Live_Dialog(this);
        lin_live_dialog.show();
        lin_live_dialog.findViewById(R.id.lin_live_back).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                lin_live_dialog.dismiss();
            }
        });
        //直播类目数据展示
        bf_fl = lin_live_dialog.findViewById(R.id.beforese_fl);
        //危险因素
        Danger_fl= lin_live_dialog.findViewById(R.id.Danger_fl);
        //危险因素
        setTwoFlowLayout();
        //直播类目
        setOneFlowLayout();

      //  lin_dialog.dismiss();
    }
    //直播类目
    @SuppressLint("ResourceAsColor")
    private void addTextView(String str) {
        TextView child = new TextView(this);
        ViewGroup.MarginLayoutParams params = new ViewGroup.MarginLayoutParams(ViewGroup.MarginLayoutParams.WRAP_CONTENT, ViewGroup.MarginLayoutParams.WRAP_CONTENT);
        params.setMargins(5, 5, 5, 5);
        child.setLayoutParams(params);
        child.setBackgroundResource(R.drawable.befirese_tv);
        child.setText(str);
        //    child.setTextColor(R.color.textColor_vo);
        initEvents(child);//监听
        bf_fl.addView(child);
    }

    //危险因素
    @SuppressLint("ResourceAsColor")
    private void addTextViews(String str) {
        TextView child = new TextView(this);
        ViewGroup.MarginLayoutParams params = new ViewGroup.MarginLayoutParams(ViewGroup.MarginLayoutParams.WRAP_CONTENT, ViewGroup.MarginLayoutParams.WRAP_CONTENT);
        params.setMargins(5, 5, 5, 5);
        child.setLayoutParams(params);
        child.setBackgroundResource(R.drawable.befirese_tv);
        child.setText(str);
        //    child.setTextColor(R.color.textColor_vo);
//        initEvents(child);//监听
        Danger_fl.addView(child);

    }

    //医生权限
    @SuppressLint("ResourceAsColor")
    private void addDoctors(String str) {
        TextView child = new TextView(this);
        ViewGroup.MarginLayoutParams params = new ViewGroup.MarginLayoutParams(ViewGroup.MarginLayoutParams.WRAP_CONTENT, ViewGroup.MarginLayoutParams.WRAP_CONTENT);
        params.setMargins(5, 5, 5, 5);
        child.setLayoutParams(params);
        child.setBackgroundResource(R.drawable.befirese_tv);
        child.setText(str);
        //    child.setTextColor(R.color.textColor_vo);
        initEvents(child);//监听
        authority_fl.addView(child);

    }

    //医生权限
    @SuppressLint("ResourceAsColor")
    private void addPatient(String str) {
        TextView child = new TextView(this);
        ViewGroup.MarginLayoutParams params = new ViewGroup.MarginLayoutParams(ViewGroup.MarginLayoutParams.WRAP_CONTENT, ViewGroup.MarginLayoutParams.WRAP_CONTENT);
        params.setMargins(5, 5, 5, 5);
        child.setLayoutParams(params);
        child.setBackgroundResource(R.drawable.befirese_tv);
        child.setText(str);
        //    child.setTextColor(R.color.textColor_vo);
        initEvents(child);//监听
        authority_fl.addView(child);
    }
    //直播主题dialog
    private void lin_Dialog() {
        lin_dialog = new Lin_Dialog(this);
        lin_dialog.show();
        //关闭
        lin_dialog.findViewById(R.id.back_beforese).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                lin_dialog.dismiss();
            }
        });
        //相机相册选择
        lin_dialog.findViewById(R.id.beforese_add).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String[] items = {"拍照", "从相册选择"};
                Dialog dialog = new android.support.v7.app.AlertDialog.Builder(mContext)
                        .setItems(items, new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialogInterface, int i) {
                                switch (i) {
                                    case 0:
                                        StrictMode.VmPolicy.Builder builder = new StrictMode.VmPolicy.Builder();
                                        StrictMode.setVmPolicy(builder.build());
                                        builder.detectFileUriExposure();
                                        // 添加Action类型：MediaStore.ACTION_IMAGE_CAPTURE
                                        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                                        // 指定调用相机拍照后照片(结果)的储存路径
                                        intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(mTempFile));
                                        // 等待返回结果
                                        startActivityForResult(intent, Constant.SELECT_PIC_BY_TACK_PHOTO);
                                        break;
                                    case 1:
                                        BitmapUtil.selectAlbum(BeforesettingActivity.this);//从相册选择
                                        break;
                                }
                            }
                        }).show();
            }
        });
      //时间选择
        lin_dialog.findViewById(R.id.beforese_time).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showBirthDayChoiceDialog();
            }
        });
     //确认按钮
      lin_dialog.findViewById( R.id.beforese_confirm) .setOnClickListener(new View.OnClickListener() {
          @Override
          public void onClick(View v) {
              lin_dialog.dismiss();
              classDialog = new ClassDialog(BeforesettingActivity.this);
              classDialog.show();
              classDialog.findViewById(R.id.class_back).setOnClickListener(new View.OnClickListener() {
                  @Override
                  public void onClick(View v) {
                      classDialog.dismiss();
                  }
              });
          }
      });
      //直播关键字
        lin_dialog.findViewById(R.id.Keyword).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(BeforesettingActivity.this, KeywordActivity.class);
                startActivity(intent);
            }
        });

    }

    /**
     * 选择日期
     */
    private void showBirthDayChoiceDialog() {
        Calendar nowdate = Calendar.getInstance();
        int mYear = nowdate.get(Calendar.YEAR);
        int mMonth = nowdate.get(Calendar.MONTH);
        int mDay = nowdate.get(Calendar.DAY_OF_MONTH);
        new DatePickerDialog(mContext, onDateSetListener, mYear, mMonth, mDay).show();
    }

    private DatePickerDialog.OnDateSetListener onDateSetListener = new DatePickerDialog.OnDateSetListener() {

        @Override
        public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {
            int mYear = year;
            int mMonth = monthOfYear + 1;
            int mDay = dayOfMonth;
            String month = "";
            String day = "";
//            TextView date_textview = (TextView) findViewById(R.id.changebirth_textview);
            String days;
            if (mMonth < 10)
                month = "0" + mMonth;
            else
                month = mMonth + "";
            if (mDay < 10)
                day = "0" + mDay;
            else
                day = mDay + "";
            beforese_time=lin_dialog.findViewById(R.id.beforese_time);
            beforese_time.setText(mYear + "-" + month + "-" + day);
         //   mProvideViewSysUserDoctorInfoAndHospital.setBirthdayStr(mYear + "-" + month + "-" + day);
            System.out.println();
        }
    };


    @Override
    protected void onActivityResult(
            int requestCode,  // 请求码 自定义
            int resultCode,  // 结果码 成功 -1 == OK
            Intent data) { // 数据 ? 可以没有
        try {

            // 如果是直接从相册获取
            if (requestCode == Constant.SELECT_PIC_FROM_ALBUM
                    && resultCode == RESULT_OK
                    && data != null) {

                final Uri uri = data.getData();//返回相册图片的Uri
                BitmapUtil.startPhotoZoom(mActivity, uri, 450);
            }

            // 处理拍照返回
            if (requestCode == Constant.SELECT_PIC_BY_TACK_PHOTO
                    && resultCode == RESULT_OK) {// 拍照成功 RESULT_OK= -1
                // 剪裁图片
                BitmapUtil.startPhotoZoom(mActivity, Uri.fromFile(mTempFile), 450);
            }
            // 接收剪裁回来的结果
            if (requestCode == Constant.REQUEST_PHOTO_CUT
                    && resultCode == RESULT_OK) {// 剪裁加工成功
                //让剪裁结果显示到图片框
                setPicToView(data);
            }
        } catch (Exception e) {
            Log.i("yi", "yichahahaha");
        }
        super.onActivityResult(requestCode, resultCode, data);
    }

    public void setPicToView(Intent data) {
        Bitmap photo;
        try {
            Uri u = data.getData();
            if (u != null) {
                photo = BitmapFactory.decodeStream(getContentResolver().openInputStream(data.getData()));//将imageUri对象的图片加载到内存
            } else {
                System.out.println("进来了");
                photo = BitmapFactory.decodeStream(getContentResolver().openInputStream(Uri.fromFile(new File(Environment.getExternalStorageDirectory(), "test.jpg"))));//将imageUri对象的图片加载到内存
            }
            System.out.println("图片：" + photo);
            mLin_add= photo;

            //显示图片
//            mUserHeadImage.setImageBitmap(photo);
            lin_add=lin_dialog.findViewById(R.id.lin_add);
            Glide.with(this).load(photo).into(lin_add);

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }

    private void data(HashMap<String, String> map) {

        new Thread() {
            public void run() {
                try {
                    mNetLoginRetStr = HttpNetService.urlConnectionService("jsonDataInfo=" + new Gson().toJson(map) , Constant.SERVICEURL + "basicDataController/getBasicsDomain");
                    Log.e("tag", "run:1111 "+mNetLoginRetStr );
                } catch (Exception e) {
                    NetRetEntity retEntity = new NetRetEntity();
                    retEntity.setResCode(0);
                    retEntity.setResMsg("网络连接异常，请联系管理员：" + e.getMessage());
                    mNetLoginRetStr = new Gson().toJson(retEntity);
                    e.printStackTrace();
                }
                netRetEntity = JSON.parseObject(mNetLoginRetStr, NetRetEntity.class);

                mHandler.sendEmptyMessage(1);
            }
        }.start();
    }

    private void datas(HashMap<String, String> map) {

        new Thread() {
            public void run() {
                try {
                    mNetLoginRetStr = HttpNetService.urlConnectionService("jsonDataInfo=" + new Gson().toJson(map) , Constant.SERVICEURL + "basicDataController/getBasicsDomain");
                    Log.e("tag", "run:2222 "+mNetLoginRetStr );
                } catch (Exception e) {
                    NetRetEntity retEntity = new NetRetEntity();
                    retEntity.setResCode(0);
                    retEntity.setResMsg("网络连接异常，请联系管理员：" + e.getMessage());
                    mNetLoginRetStr = new Gson().toJson(retEntity);
                    e.printStackTrace();

                }
                netRetEntity = JSON.parseObject(mNetLoginRetStr, NetRetEntity.class);

                mHandler.sendEmptyMessage(2);
            }
        }.start();
    }

    private void Doctors(HashMap<String, String> map) {

        new Thread() {
            public void run() {
                try {
                    mNetLoginRetStr = HttpNetService.urlConnectionService("jsonDataInfo=" + new Gson().toJson(map) , Constant.SERVICEURL + "basicDataController/getBasicsDomain");
                    Log.e("tag", "run:3333 "+mNetLoginRetStr );
                } catch (Exception e) {
                    NetRetEntity retEntity = new NetRetEntity();
                    retEntity.setResCode(0);
                    retEntity.setResMsg("网络连接异常，请联系管理员：" + e.getMessage());
                    mNetLoginRetStr = new Gson().toJson(retEntity);
                    e.printStackTrace();

                }
                netRetEntity = JSON.parseObject(mNetLoginRetStr, NetRetEntity.class);

                mHandler.sendEmptyMessage(3);
            }
        }.start();
    }

    private void Patient(HashMap<String, String> map) {

        new Thread() {
            public void run() {
                try {
                    mNetLoginRetStr = HttpNetService.urlConnectionService("jsonDataInfo=" + new Gson().toJson(map) , Constant.SERVICEURL + "basicDataController/getBasicsDomain");
                    Log.e("tag", "run:3333 "+mNetLoginRetStr );
                } catch (Exception e) {
                    NetRetEntity retEntity = new NetRetEntity();
                    retEntity.setResCode(0);
                    retEntity.setResMsg("网络连接异常，请联系管理员：" + e.getMessage());
                    mNetLoginRetStr = new Gson().toJson(retEntity);
                    e.printStackTrace();

                }
                netRetEntity = JSON.parseObject(mNetLoginRetStr, NetRetEntity.class);

                mHandler.sendEmptyMessage(4);
            }
        }.start();
    }

    @SuppressLint("HandlerLeak")
    private void initHandler() {
        mHandler = new Handler() {
            @SuppressLint("HandlerLeak")
            @Override
            public void handleMessage(Message msg) {
                switch (msg.what) {
                    case 1:
                        if (mNetLoginRetStr != null && !mNetLoginRetStr.equals("")) {
                            provideBasicsDomains = JSON.parseArray(JSON.parseObject(mNetLoginRetStr,NetRetEntity.class).getResJsonData(),ProvideBasicsDomain.class);
                            list=new ArrayList<>();
                            for (int i=0;i<provideBasicsDomains.size();i++){
                                list.add( provideBasicsDomains.get(i));
                            }
                            for (int i = 0; i <list.size(); i++) {
                                addTextView(list.get(i).getAttrName());
                            }
                        }

                        break;

                    case 2:
                        if (mNetLoginRetStr != null && !mNetLoginRetStr.equals("")) {
                            provideBasicsDomains = JSON.parseArray(JSON.parseObject(mNetLoginRetStr,NetRetEntity.class).getResJsonData(),ProvideBasicsDomain.class);
                            danger=new ArrayList<>();
                            for (int i=0;i<provideBasicsDomains.size();i++){
                                danger.add( provideBasicsDomains.get(i));
                            }
                            for (int i = 0; i <danger.size(); i++) {
                                addTextViews(danger.get(i).getAttrName());
                            }
                        }
                        break;
                    case 3:
                        if (mNetLoginRetStr != null && !mNetLoginRetStr.equals("")) {
                            provideBasicsDomains = JSON.parseArray(JSON.parseObject(mNetLoginRetStr,NetRetEntity.class).getResJsonData(),ProvideBasicsDomain.class);
                            Doctors=new ArrayList<>();
                            authority_fl.removeAllViews();
                            for (int i=0;i<provideBasicsDomains.size();i++){
                                Doctors.add( provideBasicsDomains.get(i));
                            }
                            for (int i = 0; i <Doctors.size(); i++) {
                                addDoctors(Doctors.get(i).getAttrName());
                            }
                        }
                        break;
                    case 4:
                        if (mNetLoginRetStr != null && !mNetLoginRetStr.equals("")) {
                            provideBasicsDomains = JSON.parseArray(JSON.parseObject(mNetLoginRetStr,NetRetEntity.class).getResJsonData(),ProvideBasicsDomain.class);
                            authority_fl.removeAllViews();
                            Patient=new ArrayList<>();
                            for (int i=0;i<provideBasicsDomains.size();i++){
                                Patient.add( provideBasicsDomains.get(i));
                            }
                        //    authority_fl
                            for (int i = 0; i <Patient.size(); i++) {
                                addPatient(Patient.get(i).getAttrName());
                            }
                        }
                        break;
                }
            }
        };
    }
}
