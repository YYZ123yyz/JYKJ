package yyz_exploit.activity.activity;

import android.app.ProgressDialog;
import android.content.Context;
import android.os.Bundle;
import android.os.Handler;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.View;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;
import com.allen.library.interceptor.Transformer;
import com.allen.library.interfaces.ILoadingView;
import com.hyphenate.easeui.utils.CollectionUtils;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import butterknife.BindView;
import butterknife.ButterKnife;
import www.jykj.com.jykj_zxyl.R;
import www.jykj.com.jykj_zxyl.app_base.base_bean.BaseBean;
import www.jykj.com.jykj_zxyl.app_base.http.ApiHelper;
import www.jykj.com.jykj_zxyl.app_base.http.CommonDataObserver;
import www.jykj.com.jykj_zxyl.app_base.http.ParameUtil;
import www.jykj.com.jykj_zxyl.app_base.http.RetrofitUtil;
import www.jykj.com.jykj_zxyl.application.JYKJApplication;
import www.jykj.com.jykj_zxyl.util.ActivityUtil;
import www.jykj.com.jykj_zxyl.util.GsonUtils;
import yyz_exploit.activity.adapter.Rv_ServiceAdapter;
import yyz_exploit.activity.adapter.Rv_ServicesAdapter;
import yyz_exploit.bean.ServiceBean;

public class ServiceActivity extends AppCompatActivity implements View.OnClickListener {
    public ProgressDialog mDialogProgress = null;
    @BindView(R.id.ll_back)
    LinearLayout llBack;
    @BindView(R.id.commit)
    TextView commit;
    @BindView(R.id.iv_activityServicePermisionSet_serviceSet)
    ImageView ivActivityServicePermisionSetServiceSet;
    @BindView(R.id.rv_Detect)
    RecyclerView rvDetect;
    @BindView(R.id.rv_coaching)
    RecyclerView rvCoaching;
    private JYKJApplication mApp;
    private Handler mHandler;
    private String mNetRetStr;                 //获取返回字符串
    private Context mContext;
    private ServiceActivity mActivity;
    private LinearLayoutManager layoutManager;
    private List<ServiceBean> serviceBeans;
    private Rv_ServiceAdapter rvServiceAdapter;
    private Rv_ServicesAdapter rv_servicesAdapter;
    private int mServiceType;              //服务类型
    private int mDoctorStatus;              //医生认证状态

    private String flagOpening="";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_service);
        ButterKnife.bind(this);
        mContext = this;
        mActivity = this;
        mApp = (JYKJApplication) getApplication();
        ActivityUtil.setStatusBarMain(mActivity);

        //检测类型
        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(mContext);
        linearLayoutManager.setOrientation(LinearLayout.VERTICAL);
        rvDetect.setLayoutManager(linearLayoutManager);
        //如果可以确定每个item的高度是固定的，设置这个选项可以提高性能
        rvDetect.setHasFixedSize(true);

        //辅导类型
        layoutManager = new LinearLayoutManager(mActivity);
        layoutManager.setOrientation(LinearLayout.VERTICAL);
        rvCoaching.setLayoutManager(layoutManager);
        rvCoaching.setHasFixedSize(true);
        //   mDoctorStatus = getIntent().getIntExtra("doctorStatus", 0);
        mServiceType = getIntent().getIntExtra("serviceType", 0);
        initView();
        sendGetMonitorSerivceRequest("10");
        sendGetCoatchServiceRequest("20");
    }


    private void initView() {
        llBack.setOnClickListener(this);
        commit.setOnClickListener(this);
        ivActivityServicePermisionSetServiceSet.setOnClickListener(this);
    }


    private void setSwitchStatus(String flagOpening){
        if (flagOpening.equals("1")) {
            ivActivityServicePermisionSetServiceSet.setImageResource(R.mipmap.sharedataset_close);
        }else{
            ivActivityServicePermisionSetServiceSet.setImageResource(R.mipmap.sharedataset_open);
        }
    }




    /**
     * 发送监测服务类型请求
     * @param configDetailTypeCode 类型
     */
    private void sendGetMonitorSerivceRequest(String configDetailTypeCode){
        HashMap<String, Object> hashMap = ParameUtil.buildBaseDoctorParam(this);
        hashMap.put("configDetailTypeCode",configDetailTypeCode);
        String s = RetrofitUtil.encodeParam(hashMap);
        ApiHelper.getApiService().searchDoctorSignConfigDetail(s).compose(Transformer.switchSchedulers(new ILoadingView() {
            @Override
            public void showLoadingView() {
                getProgressBar("请稍候...", "正在加载数据");
            }

            @Override
            public void hideLoadingView() {
                cacerProgress();
            }
        })).subscribe(new CommonDataObserver() {
            @Override
            protected void onSuccessResult(BaseBean baseBean) {
                int resCode = baseBean.getResCode();
                if (resCode==1) {
                    String resJsonData = baseBean.getResJsonData();
                    List<ServiceBean> servicesBeans = GsonUtils.jsonToList(resJsonData, ServiceBean.class);
                    setMonitorData(servicesBeans);

                }else{
                    Toast.makeText(mActivity, baseBean.getResMsg(), Toast.LENGTH_SHORT).show();
                }
            }
        });
    }

    /**
     * 获取辅导类服务请求
     * @param configDetailTypeCode 类型
     */
    private void sendGetCoatchServiceRequest(String configDetailTypeCode){
        HashMap<String, Object> hashMap = ParameUtil.buildBaseDoctorParam(this);
        hashMap.put("configDetailTypeCode",configDetailTypeCode);
        String s = RetrofitUtil.encodeParam(hashMap);
        ApiHelper.getApiService().searchDoctorSignConfigDetail(s).compose(Transformer.switchSchedulers(new ILoadingView() {
            @Override
            public void showLoadingView() {
                getProgressBar("请稍候...", "正在加载数据");
            }

            @Override
            public void hideLoadingView() {
                cacerProgress();
            }
        })).subscribe(new CommonDataObserver() {
            @Override
            protected void onSuccessResult(BaseBean baseBean) {
                int resCode = baseBean.getResCode();
                if (resCode==1) {
                    String resJsonData = baseBean.getResJsonData();
                    List<ServiceBean> servicesBeans = GsonUtils.jsonToList(resJsonData, ServiceBean.class);
                    setCoatchData(servicesBeans);
                }
            }
        });
    }

    /**
     * 设置监测类数据
     * @param list 监测类列表
     */
    private void setMonitorData(List<ServiceBean> list){
        rvServiceAdapter = new Rv_ServiceAdapter(list, this, ServiceActivity.this);
        rvDetect.setAdapter(rvServiceAdapter);
        if (!CollectionUtils.isEmpty(list)) {
            flagOpening = list.get(0).getFlagOpening();
            setSwitchStatus(flagOpening);
        }

    }

    /**
     * 设置辅导类数据
     * @param list 辅导类列表
     */
    private void setCoatchData(List<ServiceBean> list){
        rv_servicesAdapter = new Rv_ServicesAdapter(list, mContext, mActivity);
        rvCoaching.setAdapter(rv_servicesAdapter);
    }




    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.ll_back:
                finish();
                break;
            case R.id.iv_activityServicePermisionSet_serviceSet:

                if ("1".equals(flagOpening)) {
                    flagOpening="0";
                }else if("0".equals(flagOpening)){
                    flagOpening="1";
                }
                setSwitchStatus(flagOpening);
                break;
            case R.id.commit:
                //commit();
                List<ServiceBean> monitorServices = rvServiceAdapter.getDatas();
                List<ServiceBean> coatchServices = rv_servicesAdapter.getDatas();
                List<ServiceBean> serviceBeans=new ArrayList<>();
                serviceBeans.addAll(monitorServices);
                serviceBeans.addAll(coatchServices);
                sendCommitRequest(flagOpening,serviceBeans);
                break;
        }
    }


    private void sendCommitRequest(String flagOpening,List<ServiceBean> serviceBeans){

        HashMap<String, Object> hashMap = ParameUtil.buildBaseDoctorParam(this);
        hashMap.put("flagOpening",flagOpening);
        hashMap.put("priceList",GsonUtils.toJson(serviceBeans));
        String s = RetrofitUtil.encodeParam(hashMap);
        ApiHelper.getApiService().operDoctorSignConfigPriceBatch(s)
                .compose(Transformer.switchSchedulers(new ILoadingView() {
            @Override
            public void showLoadingView() {
                getProgressBar("请稍候...", "正在提交");
            }

            @Override
            public void hideLoadingView() {
                cacerProgress();
            }
        })).subscribe(new CommonDataObserver() {
            @Override
            protected void onSuccessResult(BaseBean baseBean) {
                int resCode = baseBean.getResCode();
                if (resCode==1) {
                    Toast.makeText(mActivity, baseBean.getResMsg(), Toast.LENGTH_SHORT).show();
                    finish();
                }else{
                    Toast.makeText(mActivity, baseBean.getResMsg(), Toast.LENGTH_SHORT).show();
                }
            }


        });
    }



    /**
     * 获取进度条
     */

    public void getProgressBar(String title, String progressPrompt) {
        if (mDialogProgress == null) {
            mDialogProgress = new ProgressDialog(mContext);
        }
        mDialogProgress.setTitle(title);
        mDialogProgress.setMessage(progressPrompt);
        mDialogProgress.setCancelable(false);
        if (!mDialogProgress.isShowing()) {
            mDialogProgress.show();
        }

    }

    /**
     * 取消进度条
     */
    public void cacerProgress() {
        if (mDialogProgress != null) {
            mDialogProgress.dismiss();
        }
    }
}