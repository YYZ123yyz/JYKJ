package yyz_exploit.activity.activity;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.View;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import android.widget.Toast;
import com.alibaba.fastjson.JSON;
import com.google.gson.Gson;
import entity.conditions.QueryLectureCond;
import entity.conditions.QueryRoomDetailCond;
import entity.liveroom.*;
import netService.HttpNetService;
import netService.entity.NetRetEntity;
import org.w3c.dom.Text;

import www.jykj.com.jykj_zxyl.R;
import www.jykj.com.jykj_zxyl.activity.home.MyLiveRoomActivity;
import www.jykj.com.jykj_zxyl.activity.hyhd.SetLivePriceActivity;
import www.jykj.com.jykj_zxyl.activity.liveroom.LiveroomDetailActivity;
import www.jykj.com.jykj_zxyl.adapter.LiveLectureAdapter;
import www.jykj.com.jykj_zxyl.application.JYKJApplication;
import www.jykj.com.jykj_zxyl.util.ActivityUtil;
import www.jykj.com.jykj_zxyl.util.IConstant;
import www.jykj.com.jykj_zxyl.util.StrUtils;

import java.util.ArrayList;
import java.util.List;

public class LectureActivity extends AppCompatActivity implements View.OnClickListener {
    private JYKJApplication mApp;
    private Activity mActivity;
    private Context mContext;
    private ImageView iv_add,iv_back_left;
    private TextView layout_name;
    LinearLayoutManager mLayoutManager;
    private RecyclerView lecture_recy;
    private TextView lectrue_forecast;
    List<ProvideLiveBroadcastDetails> mdatas = new ArrayList();
    private int pageno=1;
    private int lastVisibleIndex = 0;
    boolean mLoadDate = true;
    LiveLectureAdapter preLiveAdapter;
    private LoadDataTask loadDataTask;
    public ProgressDialog mDialogProgress = null;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        mApp = (JYKJApplication)getApplication();
        mActivity = LectureActivity.this;
        mContext = LectureActivity.this;
        setContentView(R.layout.activity_lecture);
        ActivityUtil.setStatusBarMain(LectureActivity.this);
        initView();
    }

    private void initView() {
        //直播预告
        lectrue_forecast = findViewById(R.id.lectrue_forecast);
        lectrue_forecast.setOnClickListener(this);

        iv_add = findViewById(R.id.iv_add);
        iv_add.setVisibility(View.INVISIBLE);

        layout_name = findViewById(R.id.layout_name);
        layout_name.setText("专题讲座");

        iv_back_left = findViewById(R.id.iv_back_left);
        iv_back_left.setOnClickListener(this);

        lecture_recy = findViewById(R.id.lecture_recy);
        mLayoutManager = new LinearLayoutManager(mContext);
        mLayoutManager.setOrientation(LinearLayout.VERTICAL);
        lecture_recy.setLayoutManager(mLayoutManager);
        preLiveAdapter = new LiveLectureAdapter(mdatas);
        lecture_recy.setAdapter(preLiveAdapter);
        lecture_recy.addOnScrollListener(new RecyclerView.OnScrollListener() {
            @Override
            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
                super.onScrollStateChanged(recyclerView, newState);
                if (newState == RecyclerView.SCROLL_STATE_IDLE) {
                    if (mLoadDate) {
                        int lastVisiblePosition = mLayoutManager.findLastVisibleItemPosition();
                        if (lastVisiblePosition >= mLayoutManager.getItemCount() - 1) {
                            pageno++;
                            loadData();
                        }
                    }
                }
            }
        });
        preLiveAdapter.setMyListener(new LiveLectureAdapter.OnHotliveItemClickListener() {
            @Override
            public void onClick(int position, View view) {
                switch (view.getId()){
                    case R.id.pre_live_btn:
                        ProvideLiveBroadcastDetails parbean = mdatas.get(position);
                        Intent parintent = new Intent(mActivity, LiveroomDetailActivity.class);
                        parintent.putExtra("detailCode",parbean.getDetailsCode());
                        mActivity.startActivity(parintent);
                        break;
                    case R.id.pre_live_price_set:
                        ProvideLiveBroadcastDetails setbean = mdatas.get(position);
                        Intent setint = new Intent(mActivity, SetLivePriceActivity.class);
                        setint.putExtra("set_live_info",setbean);
                        mActivity.startActivity(setint);
                        break;
                    case R.id.ll_root:
                        ProvideLiveBroadcastDetails choseparbean = mdatas.get(position);
                        Intent detintent = new Intent(mActivity, LiveroomDetailActivity.class);
                        detintent.putExtra("detailCode",choseparbean.getDetailsCode());
                        mActivity.startActivity(detintent);
                        break;
                    case R.id.iv_collection_btn:
                        ProvideLiveBroadcastDetails starbean = mdatas.get(position);
                        doFocus(starbean,position);
                        break;
                }

            }

            @Override
            public void onLongClick(int position, View view) {

            }
        });
        loadData();
    }

    void doFocus(ProvideLiveBroadcastDetails parabean,int selpos){
        getProgressBar("提交数据","数据提交中，请稍后");
        FocusBean subbean = new FocusBean();
        subbean.setDetailsCode(parabean.getDetailsCode());
        subbean.setLoginUserPosition(mApp.loginDoctorPosition);
        subbean.setOperUserCode(mApp.mViewSysUserDoctorInfoAndHospital.getDoctorCode());
        subbean.setOperUserName(mApp.mViewSysUserDoctorInfoAndHospital.getUserName());
        subbean.setRequestClientType("1");
        SubFocusTask subFocusTask = new SubFocusTask(subbean,parabean,selpos);
        subFocusTask.execute();
    }

    class SubFocusTask extends AsyncTask<Void,Void,Boolean> {
        FocusBean subean;
        String repmsg = "";
        SubFocusResp subresp = null;
        ProvideLiveBroadcastDetails sellive = null;
        int selpos = -1;

        SubFocusTask(FocusBean subean, ProvideLiveBroadcastDetails sellive, int selpos) {
            this.subean = subean;
            this.sellive = sellive;
            this.selpos = selpos;
        }

        @Override
        protected Boolean doInBackground(Void... voids) {
            try {
                String suburl = "https://www.jiuyihtn.com:41041/broadcastLiveDataControlle/extendBroadcastFollowNum";
                if (1 == sellive.getFlagLikes()) {
                    suburl = "https://www.jiuyihtn.com:41041/broadcastLiveDataControlle/Numberofprecastviewerscancelled";
                    sellive.setFlagLikes(0);
                    if (null != sellive.getExtendBroadcastFollowNum()) {
                        sellive.setExtendBroadcastFollowNum(sellive.getExtendBroadcastFollowNum().intValue() - 1);
                    } else {
                        sellive.setExtendBroadcastFollowNum(0);
                    }
                } else {
                    sellive.setFlagLikes(1);
                    if (null != sellive.getExtendBroadcastFollowNum()) {
                        sellive.setExtendBroadcastFollowNum(sellive.getExtendBroadcastFollowNum().intValue() + 1);
                    } else {
                        sellive.setExtendBroadcastFollowNum(0);
                    }
                }
                String repjson = HttpNetService.urlConnectionService("jsonDataInfo=" + new Gson().toJson(subean), "https://www.jiuyihtn.com:41041/broadcastLiveDataControlle/extendBroadcastFollowNum");
                com.hyphenate.easeui.netService.entity.NetRetEntity retEntity = JSON.parseObject(repjson, com.hyphenate.easeui.netService.entity.NetRetEntity.class);
                repmsg = retEntity.getResMsg();
                if (1 == retEntity.getResCode()) {
                    subresp = JSON.parseObject(StrUtils.defaulObjToStr(retEntity.getResJsonData()), SubFocusResp.class);
                    return true;
                }
            } catch (Exception ex) {
                repmsg = "系统异常";
                ex.printStackTrace();
            }
            return false;
        }

        @Override
        protected void onPostExecute(Boolean aBoolean) {
            cacerProgress();
            Toast.makeText(mContext, repmsg, Toast.LENGTH_SHORT).show();
            if (aBoolean) {
                mdatas.set(selpos, sellive);
                preLiveAdapter.notifyDataSetChanged();
            }
        }
    }

    /**
     * 获取进度条
     */

    public void getProgressBar(String title, String progressPrompt) {
        if (mDialogProgress == null) {
            mDialogProgress = new ProgressDialog(mActivity);
        }
        mDialogProgress.setTitle(title);
        mDialogProgress.setMessage(progressPrompt);
        mDialogProgress.setCancelable(false);
        mDialogProgress.show();
    }

    /**
     * 取消进度条
     */
    public void cacerProgress() {
        if (mDialogProgress != null) {
            mDialogProgress.dismiss();
        }
    }

    void loadData(){
        QueryLectureCond queryCond = new QueryLectureCond();
        queryCond.setLoginUserPosition(mApp.loginDoctorPosition);
        queryCond.setOperUserCode(mApp.mViewSysUserDoctorInfoAndHospital.getDoctorCode());
        queryCond.setOperUserName(mApp.mViewSysUserDoctorInfoAndHospital.getUserName());
        queryCond.setPageNum(String.valueOf(pageno));
        queryCond.setRowNum(String.valueOf(IConstant.PAGE_SIZE));
        queryCond.setRequestClientType("1");
       /* queryCond.setSearchBroadcastTitle("");
        queryCond.setSearchClassCode("");
        queryCond.setSearchKeywordsCode("");
        queryCond.setSearchRiskCode("");
        queryCond.setSearchUserName("");*/
        loadDataTask = new LoadDataTask(queryCond);
        loadDataTask.execute();
    }

    class LoadDataTask extends AsyncTask<Void,Void,List<ProvideLiveBroadcastDetails>> {
        QueryLectureCond queryCond;
        LoadDataTask(QueryLectureCond queryCond){
            this.queryCond = queryCond;
        }
        @Override
        protected List<ProvideLiveBroadcastDetails> doInBackground(Void... voids) {
            mLoadDate = false;
            List<ProvideLiveBroadcastDetails> retlist = new ArrayList();
            try {
                queryCond.setPageNum(String.valueOf(pageno));
                String quejson = new Gson().toJson(queryCond);
                String retstr = HttpNetService.urlConnectionService("jsonDataInfo="+quejson,"https://www.jiuyihtn.com:41041/broadcastLiveDataControlle/searchLiveRoomDetailsByBroadcastPersonallecture");
                NetRetEntity retEntity = JSON.parseObject(retstr,NetRetEntity.class);
                if(1==retEntity.getResCode() && StrUtils.defaulObjToStr(retEntity.getResJsonData()).length()>3){
                    retlist = JSON.parseArray(retEntity.getResJsonData(),ProvideLiveBroadcastDetails.class);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            return retlist;
        }

        @Override
        protected void onPostExecute(List<ProvideLiveBroadcastDetails> hotLiveInfos) {
            if(hotLiveInfos.size()>0){
                mdatas.addAll(hotLiveInfos);
                preLiveAdapter.setData(mdatas);
                preLiveAdapter.notifyDataSetChanged();
            }else{
                if(pageno>1){
                    pageno = pageno - 1;
                }
            }
            mLoadDate = true;
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
        mdatas.clear();
        pageno = 1;
        loadData();
    }

    @Override
    public void onClick(View v) {
         switch (v.getId()){
             case R.id.iv_back_left:
                 finish();
                 break;
             case R.id.lectrue_forecast:
                 Intent intent = new Intent(LectureActivity.this, NoticeActivity.class);
                 startActivity(intent);
                 break;
         }
    }
}
