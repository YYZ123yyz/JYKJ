package yyz_exploit;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Intent;
import android.os.Handler;
import android.os.Message;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.google.gson.Gson;

import java.util.HashMap;
import java.util.Timer;
import java.util.TimerTask;

import yyz_exploit.bean.ForgetBean;
import yyz_exploit.bean.SubmitBean;
import netService.HttpNetService;
import netService.entity.NetRetEntity;
import netService.entity.ParmentEntity;
import www.jykj.com.jykj_zxyl.R;
import www.jykj.com.jykj_zxyl.activity.LoginActivity;
import www.jykj.com.jykj_zxyl.application.Constant;
import www.jykj.com.jykj_zxyl.application.JYKJApplication;


//忘记密码页面
public class Forget_activity extends Activity {

    private JYKJApplication mApp;

    private TextView layout_name;
    private ImageView iv_back_left;
    private ImageView iv_add;
    private TextView tv_activityRetist_getVCodeText;

    public ProgressDialog mDialogProgress = null;

    private String mNetRetStr;                 //返回字符串

    private Handler mHandler;

    private TimerTask mTask;
    private int mInitVCodeTime = 120;
    private Timer mTimer;

    private String mSmsToken;                  //短信验证码token
    private EditText et_activityRegist_phoneNumEdit;
    private Button bt_activitysumbit_registBt;
    private EditText et_new_passwordEdit;
    private EditText et_new_confirm;
    private EditText et_new_vCodeEdit;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_forget_activity);
        initView();

        initHandler();
    }

    private void initView() {
        //标题栏名字
        layout_name = findViewById(R.id.layout_name);
        layout_name.setText("忘记密码");
        //返回
        iv_back_left = findViewById(R.id.iv_back_left);
        iv_back_left.setOnClickListener(new Forget_activity.ButtonClick());

        iv_add = findViewById(R.id.iv_add);
        iv_add.setVisibility(View.INVISIBLE);
        
        //获取验证码
        tv_activityRetist_getVCodeText = findViewById(R.id.tv_activityRetist_getVCodeText);
        tv_activityRetist_getVCodeText.setOnClickListener(new ButtonClick());
        //验证码
        et_new_vCodeEdit = findViewById(R.id.et_new_vCodeEdit);
        //输入手机号
        et_activityRegist_phoneNumEdit = findViewById(R.id.et_activityRegist_phoneNumEdit);

        //提交
        bt_activitysumbit_registBt = findViewById(R.id.bt_activitysumbit_registBt);
        bt_activitysumbit_registBt.setOnClickListener(new ButtonClick());

        //新密码
        et_new_passwordEdit = findViewById(R.id.et_new_passwordEdit);
        //确认新密码
        et_new_confirm = findViewById(R.id.et_new_confirm);
    }

    class ButtonClick implements View.OnClickListener {
        @Override
        public void onClick(View v) {
            switch (v.getId()) {
                case R.id.iv_back_left:
                    finish();
                    break;
                case R.id.tv_activityRetist_getVCodeText:
                    getVCode();
                    break;
                case R.id.bt_activitysumbit_registBt:
                    userSumbit();
                    break;
            }

        }
    }

    /**
     * 用户提交
     */
    private void userSumbit() {

        if (et_activityRegist_phoneNumEdit.getText().toString() == null || "".equals(et_activityRegist_phoneNumEdit.getText().toString())) {
            Toast.makeText(this, "请先输入手机号", Toast.LENGTH_SHORT).show();
            return;
        }
        if (tv_activityRetist_getVCodeText.getText().toString() == null || "".equals(tv_activityRetist_getVCodeText.getText().toString())) {
            Toast.makeText(this, "请先输入验证码", Toast.LENGTH_SHORT).show();
            return;
        }
        if (et_new_passwordEdit.getText().toString() == null || "".equals(et_new_passwordEdit.getText().toString())) {
            Toast.makeText(this, "请先输入密码", Toast.LENGTH_SHORT).show();
            return;
        }
        if (et_new_confirm.getText().toString() == null || "".equals(et_new_confirm.getText().toString())) {
            Toast.makeText(this, "请先输入确认新密码", Toast.LENGTH_SHORT).show();
            return;
        }
        HashMap<String, String> map = new HashMap<>();
        map.put("loginDoctorPosition", "108.93425^34.23053");
        map.put("requestClientType","1");
        map.put("newPassWord",et_new_confirm.getText().toString());
        map.put("sendUserLinkPhone",et_activityRegist_phoneNumEdit.getText().toString());
        map.put("smsVerifyData",et_new_vCodeEdit.getText().toString());
        map.put("smsVerifyTokenData",mSmsToken);

//        SubmitBean submitBean = new SubmitBean();
//        submitBean.setSendUserLinkPhone(et_activityRegist_phoneNumEdit.getText().toString());
//        submitBean.setNewPassWord(et_new_confirm.getText().toString());
//        submitBean.getSmsVerifyData(et_new_vCodeEdit.getText().toString());
//        submitBean.setSmsVerifyTokenData(mSmsToken);
//        submitBean.setLoginDoctorPosition("108.93425^34.23053");
//        submitBean.setRequestClientType("1");
        getProgressBar("请稍候", "正在提交");
        //连接网络，提交
        new Thread() {
            public void run() {
                try {
                    mNetRetStr = HttpNetService.urlConnectionService("jsonDataInfo=" + new Gson().toJson(map), Constant.SERVICEURL + "doctorLoginController/operUpdDoctorForgetPwd");
                } catch (Exception e) {
                    NetRetEntity retEntity = new NetRetEntity();
                    retEntity.setResCode(0);
                    retEntity.setResMsg("网络连接异常，请联系管理员：" + e.getMessage());
                    mNetRetStr = new Gson().toJson(retEntity);
                    e.printStackTrace();
                }
                mHandler.sendEmptyMessage(2);
            }
        }.start();
    }


    private void initHandler() {
        mHandler = new Handler() {
            @Override
            public void handleMessage(Message msg) {
                switch (msg.what) {
                    case 1:
                        cacerProgress();
                        if (mNetRetStr != null && !mNetRetStr.equals("")) {
                            NetRetEntity netRetEntity = new Gson().fromJson(mNetRetStr, NetRetEntity.class);
                            Toast.makeText(Forget_activity.this, netRetEntity.getResMsg(), Toast.LENGTH_SHORT).show();
                            if (netRetEntity.getResCode() == 1) {
                                startTask();
                                mSmsToken = netRetEntity.getResTokenData();
                                Toast.makeText(Forget_activity.this, "获取成功，请注意接收短信", Toast.LENGTH_SHORT).show();
                            } else {
                                Toast.makeText(Forget_activity.this, "获取失败，" + netRetEntity.getResMsg(), Toast.LENGTH_SHORT).show();
                            }
                        } else {
                            Toast.makeText(Forget_activity.this, "网络连接异常，请联系管理员", Toast.LENGTH_SHORT).show();
                        }
                        break;

                    case 2:
                        cacerProgress();
                        if (mNetRetStr != null && !mNetRetStr.equals("")) {
                            NetRetEntity netRetEntity = new Gson().fromJson(mNetRetStr, NetRetEntity.class);
                            if (netRetEntity.getResCode() == 1) {
                                Toast.makeText(Forget_activity.this, "提交成功，请立即登录", Toast.LENGTH_SHORT).show();
                                startActivity(new Intent(Forget_activity.this, LoginActivity.class));

                            } else {
                                Toast.makeText(Forget_activity.this, "提交失败，" + netRetEntity.getResMsg(), Toast.LENGTH_SHORT).show();
                            }
                        } else {
                            Toast.makeText(Forget_activity.this, "网络异常，请联系管理员", Toast.LENGTH_SHORT).show();
                        }
                        break;
                    case 10:
                        mInitVCodeTime--;
                        tv_activityRetist_getVCodeText.setText(mInitVCodeTime + "");
                        tv_activityRetist_getVCodeText.setClickable(false);
                        break;
                    case 11:
                        tv_activityRetist_getVCodeText.setText("重新获取");
                        tv_activityRetist_getVCodeText.setClickable(true);
                        mInitVCodeTime = 120;
                        mTimer.cancel();
                        mTask.cancel();
                        break;
                }
            }
        };
    }


    /**
     * 获取验证码
     */
    private void getVCode() {
        //获取验证码
        if (et_activityRegist_phoneNumEdit.getText().toString() == null || "".equals(et_activityRegist_phoneNumEdit.getText().toString())) {
            Toast.makeText(this, "请先输入手机号", Toast.LENGTH_SHORT).show();
            return;
        }
        ForgetBean forgetBean = new ForgetBean();
        forgetBean.setSendUserLinkPhone(et_activityRegist_phoneNumEdit.getText().toString());
        forgetBean.setRequestClientType("1");
        forgetBean.setLoginDoctorPosition("108.93425^34.23053");
        ParmentEntity parmentEntity = new ParmentEntity();
        parmentEntity.setJsonDataInfo(new Gson().toJson(forgetBean));
        getProgressBar("请稍候", "正在获取验证码");
        //连接网络，登录
        new Thread() {
            public void run() {
                try {
                    mNetRetStr = HttpNetService.urlConnectionService("jsonDataInfo=" + new Gson().toJson(forgetBean), Constant.SERVICEURL + "doctorLoginController/loginDoctorForgetPwdSmsVerify");
                } catch (Exception e) {
                    NetRetEntity retEntity = new NetRetEntity();
                    retEntity.setResCode(0);
                    retEntity.setResMsg("网络连接异常，请联系管理员：" + e.getMessage());
                    mNetRetStr = new Gson().toJson(retEntity);
                    e.printStackTrace();
                }
                mHandler.sendEmptyMessage(1);
            }
        }.start();
    }
    /**
     * 获取进度条
     */

    public void getProgressBar(String title, String progressPrompt) {
        if (mDialogProgress == null) {
            mDialogProgress = new ProgressDialog(this);
        }
        mDialogProgress.setTitle(title);
        mDialogProgress.setMessage(progressPrompt);
        mDialogProgress.setCancelable(false);
        mDialogProgress.show();
    }

    /**
     * 取消进度条
     */
    public void cacerProgress() {
        if (mDialogProgress != null) {
            mDialogProgress.dismiss();
        }
    }
    /**
     * 启动定时器
     */
    private void startTask() {
        mTimer = new Timer();
        mTask = new TimerTask() {
            @Override
            public void run() {
                // TODO Auto-generated method stub
                if (mInitVCodeTime > 0) {
                    mHandler.sendEmptyMessage(10);

                } else {
                    mHandler.sendEmptyMessage(11);
                }
            }
        };
        mTimer.schedule(mTask, 0, 1000);
    }

}
